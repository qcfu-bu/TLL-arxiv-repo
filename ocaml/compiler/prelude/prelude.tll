-- ———————————————————————————————————————————————
-- order
-- ———————————————————————————————————————————————
inductive order : U = LT | GT | EQ


-- ———————————————————————————————————————————————
-- boolean
-- ———————————————————————————————————————————————
program andb (b1 : bool) (b2 : bool) : bool =
  match b1 with
  | true  ⇒ b2
  | false ⇒ false
  end

program orb (b1 : bool) (b2 : bool) : bool =
  match b1 with
  | true  ⇒ true
  | false ⇒ b2
  end

program notb (b : bool) : bool =
  match b with
  | true ⇒ false
  | false ⇒ true
  end

program compareb (b1 b2 : bool) : order =
  match b1 with
  | true ⇒
    match b2 with
    | true ⇒ EQ
    | false ⇒ GT
    end
  | false ⇒
    match b2 with
    | true ⇒ LT
    | false ⇒ EQ
    end
  end


-- ———————————————————————————————————————————————
-- natural numbers
-- ———————————————————————————————————————————————
program lten (x : nat) (y : nat) : bool =
  match x with
  | O ⇒ true
  | S x ⇒
    match y with
    | O ⇒ false
    | S y ⇒ x <= y
    end
  end

program ltn (x : nat) (y : nat) : bool = (S x) <= y
program gten (x : nat) (y : nat) : bool = y <= x
program gtn (x : nat) (y : nat) : bool = y < x

program eqn (x : nat) (y : nat) : bool =
  match x with
  | O ⇒
    match y with
    | O ⇒ true
    | S _ ⇒ false
    end
  | S x ⇒
    match y with
    | O ⇒ false
    | S y ⇒ x == y
    end
  end

program comparen (n1 n2 : nat) : order =
  match n1 with
  | O ⇒
    match n2 with
    | O ⇒ EQ
    | S _ ⇒ LT
    end
  | S n1 ⇒
    match n2 with
    | O ⇒ GT
    | S n2 ⇒ comparen n1 n2
    end
  end

program pred (x : nat) : nat =
  match x with
  | O ⇒ O
  | S x ⇒ x
  end

program addn (x : nat) (y : nat) : nat =
  match x with
  | O ⇒ y
  | S x ⇒ S (x + y)
  end

program subn (x : nat) (y : nat) : nat =
  match y with
  | O ⇒ x
  | S y ⇒ (pred x) - y
  end

program muln (x : nat) (y : nat) : nat =
  match x with
  | O ⇒ O
  | S x ⇒ y + x * y
  end

program divn (x : nat) (y : nat) : nat =
  if x < y then O
  else S ((x - y) / y)

program modn (x : nat) (y : nat) : nat =
  x - ((x / y) * y)


-- ———————————————————————————————————————————————
-- between
-- ———————————————————————————————————————————————
inductive between (lower upper : nat) : L =
| Between of (n : nat) {pf1 : lower <= n ≡ true} {pf2 : n <= upper ≡ true}


-- ———————————————————————————————————————————————
-- chars
-- ———————————————————————————————————————————————
inductive char : U =
| Char of (n : nat) 

program eqc (c1 c2 : char) : bool =
  match c1 with Char n1 ⇒
  match c2 with Char n2 ⇒
    n1 == n2
  end end

program comparec (c1 c2 : char) : order =
  match c1 with Char n1 ⇒
  match c2 with Char n2 ⇒
    comparen n1 n2
  end end


-- ———————————————————————————————————————————————
-- strings
-- ———————————————————————————————————————————————
inductive string : U =
| EmptyString
| String of (c : char) (s : string)

program cats (s1 : string) (s2 : string) : string =
  match s1 with
  | EmptyString ⇒ s2
  | String c s1 ⇒ String c (s1 ^ s2)
  end

program strlen (s : string) : nat =
  match s with
  | EmptyString ⇒ 0
  | String _ s ⇒ S (strlen s)
  end

program eqs (s1 s2 : string) : bool =
  match s1 with
  | EmptyString ⇒
    match s2 with
    | EmptyString ⇒ true
    | String _ _ ⇒ false
    end
  | String c1 s1 ⇒
    match s2 with
    | EmptyString ⇒ false
    | String c2 s2 ⇒ eqc c1 c2 && eqs s1 s2
    end
  end

program compares (s1 s2 : string) : order =
  match s1 with
  | EmptyString ⇒
    match s2 with
    | EmptyString ⇒ EQ
    | String _ _ ⇒ LT
    end
  | String c1 s1 ⇒
    match s2 with
    | EmptyString ⇒ GT
    | String c2 s2 ⇒
      match comparec c1 c2 with
      | EQ ⇒ compares s1 s2
      | LT ⇒ LT
      | GT ⇒ GT
      end
    end
  end


-- ———————————————————————————————————————————————
-- option
-- ———————————————————————————————————————————————
inductive option‹s,t› (A : Type‹s›) : Type‹t› =
| None
| Some of (x : A)

program and_then‹s,r,t›
  {A : Type‹s›} {B : Type‹r›} (opt : option‹_,t› A) : (A → option‹_,t› B) ⊸ option‹_,t› B =
ln f ⇒
  match opt with
  | None ⇒ None
  | Some x ⇒ f x
  end


-- ———————————————————————————————————————————————
-- lists (linear + none-linear)
-- ———————————————————————————————————————————————
inductive list‹s,t› (A : Type‹s›) : Type‹t› =
| nil
| cons of (hd : A) (tl : list‹s,t› A)

logical llen‹s,t› (A : Type‹s›) (xs : list‹s,t› A) : nat =
  match xs with
  | nil ⇒ O
  | x :: xs ⇒ S (llen _ xs)
  end

program len‹s,t› {A : Type‹s›} (xs : list‹_,t› A) : nat ⊗ list‹_,t› A =
  match xs with
  | nil ⇒ ⟨0, nil⟩
  | x :: xs ⇒
    match len _ xs with
    | ⟨n, xs⟩ ⇒ ⟨S n, x :: xs⟩
    end
  end

program append‹s,t› {A : Type‹s›} (xs : list‹_,t› A) : list‹_,t› A ⊸ list A =
ln ys ⇒
  match xs with
  | nil ⇒ ys
  | x :: xs ⇒ x :: append _ xs ys
  end


-- ———————————————————————————————————————————————
-- standard IO channels
-- ———————————————————————————————————————————————
logical stdin_rec (_ : unit) : proto =
  ⇑(b : bool) →
   match b with
   | true ⇒ ⇓(string) → stdin_rec ()
   | false ⇒ •
   end

logical stdout_rec (_ : unit) : proto =
  ⇑(b : bool) →
   match b with
   | true ⇒ ⇑(string) → stdout_rec ()
   | false ⇒ •
   end

logical stderr_rec (_ : unit) : proto =
  ⇑(b : bool) →
   match b with
   | true ⇒ ⇑(string) → stderr_rec ()
   | false ⇒ •
   end

logical stdin_t  : proto = stdin_rec ()
logical stdout_t : proto = stdout_rec ()
logical stderr_t : proto = stderr_rec ()

program readline (_ : unit) : IO string =
  let ch ⇐ open stdin in
  let ch ⇐ send ch true in
  let ⟨s, ch⟩ ⇐ recv ch in
  let ch ⇐ send ch false in
  let _ ⇐ close ch in
  return s

program print (s : string) : IO unit =
  let ch ⇐ open stdout in
  let ch ⇐ send ch true in
  let ch ⇐ send ch s in
  let ch ⇐ send ch false in
  close ch

program prerr (s : string) : IO unit =
  let ch ⇐ open stderr in
  let ch ⇐ send ch true in
  let ch ⇐ send ch s in
  let ch ⇐ send ch false in
  close ch


-- ———————————————————————————————————————————————
-- string conversions
-- ———————————————————————————————————————————————
program digits : list‹_,U› _ =
  "0" :: "1" :: "2" :: "3" :: "4" :: "5" :: "6" :: "7" :: "8" :: "9" :: nil

program get_at {A : U} (n : nat) (xs : list‹_,U› A) (a : A) : A =
  match n with
  | O ⇒
    match xs with
    | nil ⇒ a
    | x :: _ ⇒ x
    end
  | S n ⇒ 
    match xs with
    | nil ⇒ a
    | _ :: xs ⇒ get_at _ n xs a
    end
  end

program string_of_digit (n : nat) : string =
  get_at _ n digits "" 

program string_of_nat (n : nat) : string =
  let s = string_of_digit (n % 10) in
  let n = n / 10 in
  if 0 < n then
    string_of_nat n ^ s
  else s

program digit_of_char (c : char) : option‹_,L› nat =
  if eqc c '0' then Some 0 else
  if eqc c '1' then Some 1 else
  if eqc c '2' then Some 2 else
  if eqc c '3' then Some 3 else
  if eqc c '4' then Some 4 else
  if eqc c '5' then Some 5 else
  if eqc c '6' then Some 6 else
  if eqc c '7' then Some 7 else
  if eqc c '8' then Some 8 else
  if eqc c '9' then Some 9 else
  None

program nat_of_string_loop (s : string) (acc : nat) : option‹_,L› nat =
  match s with
  | EmptyString ⇒ Some acc
  | String c s ⇒
    match digit_of_char c with
    | None ⇒ None
    | Some n ⇒ nat_of_string_loop s (acc * 10 + n)
    end
  end

program nat_of_string (s : string) : option‹_,L› nat =
  nat_of_string_loop s 0
