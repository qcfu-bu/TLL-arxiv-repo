program split‹t› (zs : list‹_,t› nat) : list‹_,t› nat ⊗ list‹_,t› nat =
  match zs with
  | nil ⇒ ⟨nil, nil⟩
  | x :: zs ⇒
    match zs with
    | nil ⇒ ⟨x :: nil, nil⟩
    | y :: zs ⇒
      let ⟨xs, ys⟩ = split zs in
      ⟨x :: xs, y :: ys⟩
    end
  end

program merge‹t› (xs : list‹_,t› nat) : list‹_,t› nat ⊸ list‹_,t› nat =
ln ys ⇒
  match xs with
  | nil ⇒ ys
  | x :: xs0 ⇒
    match ys with
    | nil ⇒ x :: xs0
    | y :: ys0 ⇒
      if x <= y then
        x :: merge xs0 (y :: ys0)
      else
        y :: merge (x :: xs0) ys0
    end
  end

program msort‹t› (zs : list‹_,t› nat) : list‹_,t› nat =
  match zs with
  | nil ⇒ nil
  | x :: zs ⇒
    match zs with
    | nil ⇒ x :: nil
    | y :: zs ⇒
      let ⟨xs, ys⟩ = split (x :: y :: zs) in
      merge (msort xs) (msort ys)
    end
  end

inductive uniq‹t› (A : Type‹t›) (a : A) : Type‹t› =
| Uniq of (m : A) {pf : m ≡ a}

logical cmsort_ch‹t› (xs : list‹_,t› nat) : L =
  ch⟨ ⇑(uniq _ (msort xs)) → • ⟩

program cmsort_worker‹t› (n : nat) (zs : list‹_,t› nat) : cmsort_ch‹t› zs ⊸ IO unit =
ln c ⇒
  match n with
  | O ⇒ let c ⇐ send c (Uniq (msort zs) refl) in close c
  | S n0 ⇒
    match zs as _zs_ in cmsort_ch _zs_ ⊸ IO unit with
    | nil ⇒ ln c ⇒ let c ⇐ send c (Uniq nil refl) in close c
    | z0 :: zs0 ⇒ ln c ⇒
      match zs0 as _zs0_ in cmsort_ch (z0 :: _zs0_) ⊸ IO unit with
      | nil ⇒ ln c ⇒ let c ⇐ send c (Uniq (z0 :: nil) refl) in close c
      | z1 :: zs1 ⇒ ln c ⇒
        match split (z0 :: z1 :: zs1) as _p_ in
          {_p_ ≡ split (z0 :: z1 :: zs1)} ⊸ IO unit
        with
        | ⟨xs0, ys0⟩ ⇒ ln {e} ⇒
          let r1 ⇐ fork (r1 : cmsort_ch xs0) in cmsort_worker n0 xs0 r1 in
          let r2 ⇐ fork (r2 : cmsort_ch ys0) in cmsort_worker n0 ys0 r2 in
          let ⟨msg1, r1⟩ ⇐ recv r1 in
          let ⟨msg2, r2⟩ ⇐ recv r2 in
          match msg1 with Uniq xs1 pf1 ⇒
          match msg2 with Uniq xs2 pf2 ⇒
            let zs = merge xs1 xs2 in
            let c ⇐ send c (Uniq zs
              rew [p, _ ⇒ zs ≡ (let ⟨xs, ys⟩ = p in merge (msort xs) (msort ys))] e in
              rew [l, _ ⇒ zs ≡ merge l (msort ys0)] pf1 in
              rew [l, _ ⇒ zs ≡ merge xs1 l] pf2 in
              refl)
            in close r1; close r2; close c
          end end
        end refl
      end c
    end c
  end

program cmsort‹t› (zs : list‹_,t› nat) : IO (uniq‹t› _ (msort zs)) =
  let c ⇐ fork (c : cmsort_ch zs) in cmsort_worker 4 zs c in
  let ⟨msg, c⟩ ⇐ recv c in
  close c;
  return msg

program mkList‹t› (n : nat) : list‹_,t› nat =
  match n with
  | O ⇒ nil
  | S n0 ⇒ n :: mkList n0
  end

program free {A : U} (ls : list‹_,L› A) : unit =
  match ls with
  | nil ⇒ ()
  | _ :: ls ⇒ free _ ls
  end

/- benchmarks for sequential msort
   gcc
   real    0m14.658s
   user    0m14.540s
   sys     0m0.117s

   clang
   real    0m13.845s
   user    0m13.730s
   sys     0m0.108s -/
-- program main : IO unit =
--   let test = mkList‹L› 2000000 in
--   let sorted = msort test in
--   let _ = free _ sorted in
--   return ()
  
/- benchmarks for concurrent msort
   gcc
   real    0m4.124s
   user    0m6.026s
   sys     0m4.143s

   clang
   real    0m4.053s
   user    0m6.122s
   sys     0m3.751s -/
program main : IO unit =
  let test = mkList‹L› 2000000 in
  let msg ⇐ cmsort test in
  match msg with Uniq sorted _ ⇒
    let _ = free _ sorted in
    return ()
  end
