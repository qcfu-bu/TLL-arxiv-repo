inductive List‹s,t› (A : Type‹s›) : Type‹t› =
| Nil
| Cons of (hd : A) (tl : List‹s,t› A)

logical len‹s,t› {A : Type‹s›} (xs : List‹s,t› A) : nat =
  match xs with
  | Nil ⇒ 0
  | Cons hd tl ⇒ 1 + len _ xs
  end

logical len0‹s,t› {A : Type‹s›} : len A Nil‹_,t› ≡ 0 = refl

logical eq_sym‹s› (A : Type‹s›) (m n : A) (e : m ≡ n) : n ≡ m =
  rew [ x, _ ⇒ x ≡ m ] e in refl

logical eq_trans‹s› (A : Type‹s›) (a b c : A) (e1 : a ≡ b) (e2 : b ≡ c) : a ≡ c =
  rew [ x, _ ⇒ a ≡ x ] e2 in e1
