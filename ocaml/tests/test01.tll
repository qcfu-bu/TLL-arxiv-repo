logical snd‹s,r› {A : Type‹s›} {B : Type‹r›} (m : A ⊗ B) : B =
  let ⟨_, b⟩ = m in b

logical len_id‹s,t› {A : Type‹s›} (ls : list‹_,t› A) : ls ≡ snd _ _ (len _ ls) =
  match ls as ls0 in ls0 ≡ snd _ _ (len _ ls0) with
  | nil ⇒ refl
  | cons x xs ⇒
    match len _ xs as p in
      len _ xs ≡ p →
      cons x xs ≡ snd _ _ (let ⟨n, xs0⟩ = p in ⟨S n, cons x xs0⟩)
    with
    | ⟨a, b⟩ ⇒ fn e0 ⇒
      rew [ l, _ ⇒ cons x xs ≡ cons x l ]
        rew [ p, _ ⇒ xs ≡ snd _ _ p ] e0 in len_id A xs
      in refl
    end refl
  end
