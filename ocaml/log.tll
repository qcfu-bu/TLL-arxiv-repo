program digits‹› : ((list‹_, U›) (_)) = ((cons)
(((String) (((Char) (O.+48))) (EmptyString)))
(((cons) (((String) (((Char) (O.+49))) (EmptyString)))
 (((cons) (((String) (((Char) (O.+50))) (EmptyString)))
  (((cons) (((String) (((Char) (O.+51))) (EmptyString)))
   (((cons) (((String) (((Char) (O.+52))) (EmptyString)))
    (((cons) (((String) (((Char) (O.+53))) (EmptyString)))
     (((cons) (((String) (((Char) (O.+54))) (EmptyString)))
      (((cons) (((String) (((Char) (O.+55))) (EmptyString)))
       (((cons) (((String) (((Char) (O.+56))) (EmptyString)))
        (((cons) (((String) (((Char) (O.+57))) (EmptyString))) (nil))))))))))))))))))))

program get_at‹› {A : U} (n : nat) (xs : ((list‹_, U›)
(A))) (a : A) : A = match n as _ in _ with O ⇒ match xs as _ in _ with nil  ⇒ a | cons x
_ ⇒ x | S n ⇒ match xs as _ in _ with nil  ⇒ a | cons _
xs ⇒ ((get_at) (_) (n) (xs)
(a))

program string_of_digit‹› (n : nat) : string = ((get_at) (_) (n) 
(digits)
(EmptyString))

program string_of_nat‹› (n : nat) : string = let s = ((string_of_digit)
(((modn) (n) (O.+10)))) in let n = ((divn) (n) (O.+10)) in match ((ltn)
(O.+0) (n)) as _ in _ with true ⇒ ((cats) (((string_of_nat) (n)))
(s)) | false ⇒ s

program gcd‹› (a : nat) (b : nat) : nat = match b as _ in _ with O ⇒ a | S _ ⇒ (
(gcd) (b)
(((modn) (a) (b))))

program lcm‹› (a : nat) (b : nat) : nat = ((divn) (((muln) (a) (b)))
(((gcd) (a) (b))))

program powm‹› (a : nat) (b : nat) (m : nat) : nat = match b as _ in _ with O ⇒ O.+1 | S b ⇒ (
(modn) (((muln) (a) (((powm) (a) (b) (m)))))
(m))

logical coprime‹› (a : nat) (b : nat) : U = ((gcd) (a)
(b)) ≡ O.+1

logical RSA‹› : proto = !{x : nat} → !{y : nat} → !(n : nat) → !{_ : n ≡ (
(muln) (x) (y))} → !{tot : nat} → !{_ : tot ≡ ((lcm)
(((subn) (x) (O.+1)))
(((subn) (y) (O.+1))))} → !(e : nat) → !{_ : ((coprime) (e)
(tot))} → !{_ : ((ltn) (O.+1) (e)) ≡ true} → !{_ : ((ltn) (e)
(tot)) ≡ true} → ?{P0 : nat} → ?(C : nat) → ?{_ : C ≡ ((powm) 
(P0) (e)
(n))} → end

logical RSA_ch‹› : L = ch‹RSA›

logical RSA_hc‹› : L = hc‹RSA›

program server‹› (ch : RSA_ch) : IO unit = let x = O.+61 in let y = O.+53 in let n = (
(muln) (x) (y)) in let tot = ((lcm) (((subn) (x) (O.+1)))
(((subn) (y) (O.+1)))) in let e = O.+17 in let d = O.+413 in let ch ⇐ (
(send ch) (x)) in let ch ⇐ ((send ch) (y)) in let ch ⇐ ((send ch)
(n)) in let ch ⇐ ((send ch) (refl)) in let ch ⇐ ((send ch)
(tot)) in let ch ⇐ ((send ch) (refl)) in let ch ⇐ ((send ch)
(e)) in let ch ⇐ ((send ch) (refl)) in let ch ⇐ ((send ch)
(refl)) in let ch ⇐ ((send ch)
(refl)) in let ⟨{P0}, ch⟩ ⇐ recv ch in let ⟨C, ch⟩ ⇐ recv ch in let ⟨{pf}, ch⟩ ⇐ recv ch in let P1 = (
(powm) (C) (d) (n)) in let _ ⇐ close ch in ((print)
(((cats) (((string_of_nat) (P1)))
 (((String) (((Char) (O.+10))) (EmptyString))))))

program client‹› (ch : RSA_hc) : IO unit = let P0 = O.+123 in let ⟨{x}, ch⟩ ⇐ recv ch in let ⟨{y}, ch⟩ ⇐ recv ch in let ⟨n, ch⟩ ⇐ recv ch in let ⟨{pf1}, ch⟩ ⇐ recv ch in let ⟨{tot}, ch⟩ ⇐ recv ch in let ⟨{pf2}, ch⟩ ⇐ recv ch in let ⟨e, ch⟩ ⇐ recv ch in let ⟨{pf3}, ch⟩ ⇐ recv ch in let ⟨{pf4}, ch⟩ ⇐ recv ch in let ⟨{pf5}, ch⟩ ⇐ recv ch in let ch ⇐ (
(send ch) (P0)) in let ch ⇐ ((send ch)
(((powm) (P0) (e) (n)))) in let ch ⇐ ((send ch)
(refl)) in close ch

program main‹› : IO unit = let c ⇐ fork (c : RSA_ch) in ((server)
(c)) in let c0 ⇐ fork (c0 : ch‹?(_ : RSA_hc) → end›) in let ⟨c, c0⟩ ⇐ recv c0 in let _ ⇐ close c0 in (
(client) (c)) in let c0 ⇐ ((send c0)
(c)) in let _ ⇐ close c0 in sleep O.+1

parsing success--------------------------

program andb_i1 : bool → bool → bool =
  fn (b1_v256 : bool) (b2_v257 : bool) ⇒
    match b1_v256 as __v258 in ??1 with
    | true ⇒ b2_v257 | false ⇒ false
    end

program orb_i2 : bool → bool → bool =
  fn (b1_v261 : bool) (b2_v262 : bool) ⇒
    match b1_v261 as __v263 in ??2 with
    | true ⇒ true | false ⇒ b2_v262
    end

program notb_i3 : bool → bool =
  fn (b_v265 : bool) ⇒
    match b_v265 as __v266 in ??3 with
    | true ⇒ false | false ⇒ true
    end

program lten_i4 : nat → nat → bool =
  fn (x_v269 : nat) (y_v270 : nat) ⇒
    match x_v269 as __v271 in ??4 with
    | O ⇒ true
    | S x_v272 ⇒
      match y_v270 as __v273 in ??5 with
      | O ⇒ false | S y_v274 ⇒ (lten_i4 x_v272 y_v274)
      end
    end

program gten_i5 : nat → nat → bool =
  fn (x_v277 : nat) (y_v278 : nat) ⇒
    match x_v277 as __v279 in ??6 with
    | O ⇒
      match y_v278 as __v280 in ??8 with
      | O ⇒ true | S __v281 ⇒ false
      end
    | S x_v282 ⇒
      match y_v278 as __v283 in ??7 with
      | O ⇒ true | S y_v284 ⇒ (gten_i5 x_v282 y_v284)
      end
    end

program ltn_i6 : nat → nat → bool =
  fn (x_v287 : nat) (y_v288 : nat) ⇒
    match x_v287 as __v289 in ??9 with
    | O ⇒
      match y_v288 as __v290 in ??11 with
      | O ⇒ false | S y_v291 ⇒ true
      end
    | S x_v292 ⇒
      match y_v288 as __v293 in ??10 with
      | O ⇒ false | S y_v294 ⇒ (ltn_i6 x_v292 y_v294)
      end
    end

program gtn_i7 : nat → nat → bool =
  fn (x_v297 : nat) (y_v298 : nat) ⇒
    match x_v297 as __v299 in ??12 with
    | O ⇒ false
    | S x_v300 ⇒
      match y_v298 as __v301 in ??13 with
      | O ⇒ true | S y_v302 ⇒ (gtn_i7 x_v300 y_v302)
      end
    end

program eqn_i8 : nat → nat → bool =
  fn (x_v305 : nat) (y_v306 : nat) ⇒
    match x_v305 as __v307 in ??14 with
    | O ⇒
      match y_v306 as __v308 in ??16 with
      | O ⇒ true | S __v309 ⇒ false
      end
    | S x_v310 ⇒
      match y_v306 as __v311 in ??15 with
      | O ⇒ false | S y_v312 ⇒ (eqn_i8 x_v310 y_v312)
      end
    end

program pred_i9 : nat → nat =
  fn (x_v314 : nat) ⇒
    match x_v314 as __v315 in ??17 with
    | O ⇒ 0 | S x_v316 ⇒ x_v316
    end

program addn_i10 : nat → nat → nat =
  fn (x_v319 : nat) (y_v320 : nat) ⇒
    match x_v319 as __v321 in ??18 with
    | O ⇒ y_v320 | S x_v322 ⇒ (addn_i10 x_v322 y_v320).+1
    end

program subn_i11 : nat → nat → nat =
  fn (x_v325 : nat) (y_v326 : nat) ⇒
    match y_v326 as __v327 in ??19 with
    | O ⇒ x_v325 | S y_v328 ⇒ (subn_i11 (pred_i9 x_v325) y_v328)
    end

program muln_i12 : nat → nat → nat =
  fn (x_v331 : nat) (y_v332 : nat) ⇒
    match x_v331 as __v333 in ??20 with
    | O ⇒ 0 | S x_v334 ⇒ (addn_i10 y_v332 (muln_i12 x_v334 y_v332))
    end

program divn_i13 : nat → nat → nat =
  fn (x_v337 : nat) (y_v338 : nat) ⇒
    match (ltn_i6 x_v337 y_v338) as __v339 in ??21 with
    | true ⇒ 0 | false ⇒ (divn_i13 (subn_i11 x_v337 y_v338) y_v338).+1
    end

program modn_i14 : nat → nat → nat =
  fn (x_v342 : nat) (y_v343 : nat) ⇒
    (subn_i11 x_v342 (muln_i12 (divn_i13 x_v342 y_v343) y_v343))

inductive char_d1 : U =
| Char_c1 of (n_v344 : nat) : char_d1

inductive string_d2 : U =
| EmptyString_c2 of : string_d2
| String_c3 of (c_v345 : char_d1) (s_v346 : string_d2) : string_d2

program cats_i15 : string_d2 → string_d2 → string_d2 =
  fn (s1_v349 : string_d2) (s2_v350 : string_d2) ⇒
    match s1_v349 as __v351 in ??22 with
    | EmptyString_c2  ⇒ s2_v350
    | String_c3 c_v352 s1_v353 ⇒
      (String_c3‹› c_v352 (cats_i15 s1_v353 s2_v350))
    end

program strlen_i16 : string_d2 → nat =
  fn (s_v355 : string_d2) ⇒
    match s_v355 as __v356 in ??23 with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v357 s_v358 ⇒ (strlen_i16 s_v358).+1
    end

inductive list_d3 ‹s_s359, t_s360›
  (A_v361 : Type‹s_s359›) : Type‹t_s360›
=
| nil_c4 of
    ‹s_s362, t_s363› (A_v364 : Type‹s_s362›)
    : (list_d3‹s_s362, t_s363› A_v364)
| cons_c5 of
    ‹s_s365, t_s366› (A_v367 : Type‹s_s365›) (hd_v368 : A_v367)
    (tl_v369 : (list_d3‹s_s365, t_s366› A_v367))
    : (list_d3‹s_s365, t_s366› A_v367)

program len_i17 ‹s_s370, t_s371› :
  ∀ {A_v372 : Type‹s_s370›} →
    (list_d3‹??24, t_s371› A_v372) →
      nat ⊗ (list_d3‹??25, t_s371› A_v372)
=
  fn {A_v375 : Type‹s_s370›}
     (xs_v376 : (list_d3‹??24, t_s371› A_v375)) ⇒
    match xs_v376 as __v377 in ??26 with
    | nil_c4  ⇒ ⟨0, nil_c4‹??36, ??35›⟩
    | cons_c5 x_v378 xs_v379 ⇒
      match (len_i17‹??29, ??28› ??27 xs_v379) as __v380 in ??30 with
      | ⟨n_v381, xs_v382⟩ ⇒
        ⟨n_v381.+1, (cons_c5‹??33, ??32› x_v378 xs_v382)⟩
      end
    end

program append_i18 ‹s_s383, t_s384› :
  ∀ {A_v385 : Type‹s_s383›} →
    (list_d3‹??37, t_s384› A_v385) →
      (list_d3‹??38, t_s384› A_v385) ⊸ (list_d3‹??40, ??39› A_v385)
=
  fn {A_v388 : Type‹s_s383›}
     (xs_v389 : (list_d3‹??37, t_s384› A_v388)) ⇒
    ln (ys_v390 : ??41) ⇒
      match xs_v389 as __v391 in ??42 with
      | nil_c4  ⇒ ys_v390
      | cons_c5 x_v392 xs_v393 ⇒
        (cons_c5‹??48, ??47›
          x_v392 (append_i18‹??45, ??44› ??43 xs_v393 ys_v390))
      end

logical stdin_rec_i19 : unit → proto =
  fn (__v395 : unit) ⇒
    ⇑(b_v396 : bool) ⇒
      match b_v396 as __v397 in ??49 with
      | true ⇒ ⇓(__v398 : string_d2) ⇒ (stdin_rec_i19 ())
      | false ⇒ end
      end

logical stdout_rec_i20 : unit → proto =
  fn (__v400 : unit) ⇒
    ⇑(b_v401 : bool) ⇒
      match b_v401 as __v402 in ??50 with
      | true ⇒ ⇑(__v403 : string_d2) ⇒ (stdout_rec_i20 ())
      | false ⇒ end
      end

logical stderr_rec_i21 : unit → proto =
  fn (__v405 : unit) ⇒
    ⇑(b_v406 : bool) ⇒
      match b_v406 as __v407 in ??51 with
      | true ⇒ ⇑(__v408 : string_d2) ⇒ (stderr_rec_i21 ())
      | false ⇒ end
      end

logical stdin_t_i22 : proto = (stdin_rec_i19 ())

logical stdout_t_i23 : proto = (stdout_rec_i20 ())

logical stderr_t_i24 : proto = (stderr_rec_i21 ())

program readline_i25 : unit → IO string_d2 =
  fn (__v410 : unit) ⇒
    let ch_v411 ⇐ open stdin in
    let ch_v412 ⇐ (send ch_v411 true) in
    let __v413 ⇐ recv ch_v412 in
    match __v413 as __v414 in ??52 with
    | ⟨s_v415, ch_v416⟩ ⇒
      let ch_v417 ⇐ (send ch_v416 false) in
      let __v418 ⇐ close ch_v417 in return s_v415
    end

program print_i26 : string_d2 → IO unit =
  fn (s_v420 : string_d2) ⇒
    let ch_v421 ⇐ open stdout in
    let ch_v422 ⇐ (send ch_v421 true) in
    let ch_v423 ⇐ (send ch_v422 s_v420) in
    let ch_v424 ⇐ (send ch_v423 false) in close ch_v424

program prerr_i27 : string_d2 → IO unit =
  fn (s_v426 : string_d2) ⇒
    let ch_v427 ⇐ open stderr in
    let ch_v428 ⇐ (send ch_v427 true) in
    let ch_v429 ⇐ (send ch_v428 s_v426) in
    let ch_v430 ⇐ (send ch_v429 false) in close ch_v430

program digits_i28 : (list_d3‹??53, U› ??54) =
  (cons_c5‹??87, ??86›
    "0"
    (cons_c5‹??84, ??83›
      "1"
      (cons_c5‹??81, ??80›
        "2"
        (cons_c5‹??78, ??77›
          "3"
          (cons_c5‹??75, ??74›
            "4"
            (cons_c5‹??72, ??71›
              "5"
              (cons_c5‹??69, ??68›
                "6"
                (cons_c5‹??66, ??65›
                  "7"
                  (cons_c5‹??63, ??62›
                    "8" (cons_c5‹??60, ??59› "9" nil_c4‹??57, ??56›))))))))))

program get_at_i29 :
  ∀ {A_v431 : U} →
    nat → (list_d3‹??88, U› A_v431) → A_v431 → A_v431
=
  fn {A_v435 : U} (n_v436 : nat) (xs_v437 : (list_d3‹??88, U› A_v435))
     (a_v438 : A_v435) ⇒
    match n_v436 as __v439 in ??89 with
    | O ⇒
      match xs_v437 as __v440 in ??92 with
      | nil_c4  ⇒ a_v438 | cons_c5 x_v441 __v442 ⇒ x_v441
      end
    | S n_v443 ⇒
      match xs_v437 as __v444 in ??90 with
      | nil_c4  ⇒ a_v438
      | cons_c5 __v445 xs_v446 ⇒ (get_at_i29 ??91 n_v443 xs_v446 a_v438)
      end
    end

program string_of_digit_i30 : nat → string_d2 =
  fn (n_v448 : nat) ⇒
    (get_at_i29 ??93 n_v448 digits_i28 EmptyString_c2‹›)

program string_of_nat_i31 : nat → string_d2 =
  fn (n_v450 : nat) ⇒
    let s_v451 = (string_of_digit_i30 (modn_i14 n_v450 10)) in
    let n_v452 = (divn_i13 n_v450 10) in
    match (ltn_i6 0 n_v452) as __v453 in ??94 with
    | true ⇒ (cats_i15 (string_of_nat_i31 n_v452) s_v451)
    | false ⇒ s_v451
    end

program gcd_i32 : nat → nat → nat =
  fn (a_v456 : nat) (b_v457 : nat) ⇒
    match b_v457 as __v458 in ??95 with
    | O ⇒ a_v456 | S __v459 ⇒ (gcd_i32 b_v457 (modn_i14 a_v456 b_v457))
    end

program lcm_i33 : nat → nat → nat =
  fn (a_v462 : nat) (b_v463 : nat) ⇒
    (divn_i13 (muln_i12 a_v462 b_v463) (gcd_i32 a_v462 b_v463))

program powm_i34 : nat → nat → nat → nat =
  fn (a_v467 : nat) (b_v468 : nat) (m_v469 : nat) ⇒
    match b_v468 as __v470 in ??96 with
    | O ⇒ 1
    | S b_v471 ⇒
      (modn_i14 (muln_i12 a_v467 (powm_i34 a_v467 b_v471 m_v469)) m_v469)
    end

logical coprime_i35 : nat → nat → U =
  fn (a_v474 : nat) (b_v475 : nat) ⇒ (gcd_i32 a_v474 b_v475) ≡ 1

logical RSA_i36 : proto =
  ⇑{x_v476 : nat} ⇒
    ⇑{y_v477 : nat} ⇒
      ⇑(n_v478 : nat) ⇒
        ⇑{__v479 : n_v478 ≡ (muln_i12 x_v476 y_v477)} ⇒
          ⇑{tot_v480 : nat} ⇒
            ⇑{__v481 :
              tot_v480 ≡ (lcm_i33 (subn_i11 x_v476 1) (subn_i11 y_v477 1))} ⇒
              ⇑(e_v482 : nat) ⇒
                ⇑{__v483 : (coprime_i35 e_v482 tot_v480)} ⇒
                  ⇑{__v484 : (ltn_i6 1 e_v482) ≡ true} ⇒
                    ⇑{__v485 : (ltn_i6 e_v482 tot_v480) ≡ true} ⇒
                      ⇓{P0_v486 : nat} ⇒
                        ⇓(C_v487 : nat) ⇒
                          ⇓{__v488 :
                            C_v487 ≡ (powm_i34 P0_v486 e_v482 n_v478)} ⇒
                            end

logical RSA_ch_i37 : L = ch⟨RSA_i36⟩

logical RSA_hc_i38 : L = hc⟨RSA_i36⟩

program server_i39 : RSA_ch_i37 → IO unit =
  fn (ch_v490 : RSA_ch_i37) ⇒
    let x_v491 = 61 in
    let y_v492 = 53 in
    let n_v493 = (muln_i12 x_v491 y_v492) in
    let tot_v494 = (lcm_i33 (subn_i11 x_v491 1) (subn_i11 y_v492 1)) in
    let e_v495 = 17 in
    let d_v496 = 413 in
    let ch_v497 ⇐ (send ch_v490 x_v491) in
    let ch_v498 ⇐ (send ch_v497 y_v492) in
    let ch_v499 ⇐ (send ch_v498 n_v493) in
    let ch_v500 ⇐ (send ch_v499 refl ??103) in
    let ch_v501 ⇐ (send ch_v500 tot_v494) in
    let ch_v502 ⇐ (send ch_v501 refl ??104) in
    let ch_v503 ⇐ (send ch_v502 e_v495) in
    let ch_v504 ⇐ (send ch_v503 refl ??105) in
    let ch_v505 ⇐ (send ch_v504 refl ??106) in
    let ch_v506 ⇐ (send ch_v505 refl ??107) in
    let __v507 ⇐ recv ch_v506 in
    match __v507 as __v508 in ??110 with
    | ⟨{P0_v509}, ch_v510⟩ ⇒
      let __v511 ⇐ recv ch_v510 in
      match __v511 as __v512 in ??109 with
      | ⟨C_v513, ch_v514⟩ ⇒
        let __v515 ⇐ recv ch_v514 in
        match __v515 as __v516 in ??108 with
        | ⟨{pf_v517}, ch_v518⟩ ⇒
          let P1_v519 = (powm_i34 C_v513 d_v496 n_v493) in
          let __v520 ⇐ close ch_v518 in
          (print_i26 (cats_i15 (string_of_nat_i31 P1_v519) "\n"))
        end
      end
    end

program client_i40 : RSA_hc_i38 → IO unit =
  fn (ch_v522 : RSA_hc_i38) ⇒
    let P0_v523 = 123 in
    let __v524 ⇐ recv ch_v522 in
    match __v524 as __v525 in ??121 with
    | ⟨{x_v526}, ch_v527⟩ ⇒
      let __v528 ⇐ recv ch_v527 in
      match __v528 as __v529 in ??120 with
      | ⟨{y_v530}, ch_v531⟩ ⇒
        let __v532 ⇐ recv ch_v531 in
        match __v532 as __v533 in ??119 with
        | ⟨n_v534, ch_v535⟩ ⇒
          let __v536 ⇐ recv ch_v535 in
          match __v536 as __v537 in ??118 with
          | ⟨{pf1_v538}, ch_v539⟩ ⇒
            let __v540 ⇐ recv ch_v539 in
            match __v540 as __v541 in ??117 with
            | ⟨{tot_v542}, ch_v543⟩ ⇒
              let __v544 ⇐ recv ch_v543 in
              match __v544 as __v545 in ??116 with
              | ⟨{pf2_v546}, ch_v547⟩ ⇒
                let __v548 ⇐ recv ch_v547 in
                match __v548 as __v549 in ??115 with
                | ⟨e_v550, ch_v551⟩ ⇒
                  let __v552 ⇐ recv ch_v551 in
                  match __v552 as __v553 in ??114 with
                  | ⟨{pf3_v554}, ch_v555⟩ ⇒
                    let __v556 ⇐ recv ch_v555 in
                    match __v556 as __v557 in ??113 with
                    | ⟨{pf4_v558}, ch_v559⟩ ⇒
                      let __v560 ⇐ recv ch_v559 in
                      match __v560 as __v561 in ??112 with
                      | ⟨{pf5_v562}, ch_v563⟩ ⇒
                        let ch_v564 ⇐ (send ch_v563 P0_v523) in
                        let ch_v565 ⇐
                          (send ch_v564 (powm_i34 P0_v523 e_v550 n_v534))
                        in
                        let ch_v566 ⇐ (send ch_v565 refl ??111) in
                        close ch_v566
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

program main_i41 : IO unit =
  let c_v567 ⇐ fork (c_v568 : RSA_ch_i37) in (server_i39 c_v568) in
  let c0_v569 ⇐
    fork (c0_v570 : ch⟨⇓(__v571 : RSA_hc_i38) ⇒ end⟩) in
      let __v572 ⇐ recv c0_v570 in
      match __v572 as __v573 in ??122 with
      | ⟨c_v574, c0_v575⟩ ⇒
        let __v576 ⇐ close c0_v575 in (client_i40 c_v574)
      end
  in
  let c0_v577 ⇐ (send c0_v569 c_v567) in
  let __v578 ⇐ close c0_v577 in sleep 1

trans01 success--------------------------

program andb_i1 : bool → bool → bool =
  fn (b1_v18186 : bool) (b2_v18187 : bool) ⇒
    match b1_v18186 as __v18188 in bool with
    | true ⇒ b2_v18187 | false ⇒ false
    end

program orb_i2 : bool → bool → bool =
  fn (b1_v18191 : bool) (b2_v18192 : bool) ⇒
    match b1_v18191 as __v18193 in bool with
    | true ⇒ true | false ⇒ b2_v18192
    end

program notb_i3 : bool → bool =
  fn (b_v18195 : bool) ⇒
    match b_v18195 as __v18196 in bool with
    | true ⇒ false | false ⇒ true
    end

program lten_i4 : nat → nat → bool =
  fn (x_v18199 : nat) (y_v18200 : nat) ⇒
    match x_v18199 as __v18201 in bool with
    | O ⇒ true
    | S x_v18202 ⇒
      match y_v18200 as __v18203 in bool with
      | O ⇒ false | S y_v18204 ⇒ (lten_i4 x_v18202 y_v18204)
      end
    end

program gten_i5 : nat → nat → bool =
  fn (x_v18207 : nat) (y_v18208 : nat) ⇒
    match x_v18207 as __v18209 in bool with
    | O ⇒
      match y_v18208 as __v18210 in bool with
      | O ⇒ true | S __v18211 ⇒ false
      end
    | S x_v18212 ⇒
      match y_v18208 as __v18213 in bool with
      | O ⇒ true | S y_v18214 ⇒ (gten_i5 x_v18212 y_v18214)
      end
    end

program ltn_i6 : nat → nat → bool =
  fn (x_v18217 : nat) (y_v18218 : nat) ⇒
    match x_v18217 as __v18219 in bool with
    | O ⇒
      match y_v18218 as __v18220 in bool with
      | O ⇒ false | S y_v18221 ⇒ true
      end
    | S x_v18222 ⇒
      match y_v18218 as __v18223 in bool with
      | O ⇒ false | S y_v18224 ⇒ (ltn_i6 x_v18222 y_v18224)
      end
    end

program gtn_i7 : nat → nat → bool =
  fn (x_v18227 : nat) (y_v18228 : nat) ⇒
    match x_v18227 as __v18229 in bool with
    | O ⇒ false
    | S x_v18230 ⇒
      match y_v18228 as __v18231 in bool with
      | O ⇒ true | S y_v18232 ⇒ (gtn_i7 x_v18230 y_v18232)
      end
    end

program eqn_i8 : nat → nat → bool =
  fn (x_v18235 : nat) (y_v18236 : nat) ⇒
    match x_v18235 as __v18237 in bool with
    | O ⇒
      match y_v18236 as __v18238 in bool with
      | O ⇒ true | S __v18239 ⇒ false
      end
    | S x_v18240 ⇒
      match y_v18236 as __v18241 in bool with
      | O ⇒ false | S y_v18242 ⇒ (eqn_i8 x_v18240 y_v18242)
      end
    end

program pred_i9 : nat → nat =
  fn (x_v18244 : nat) ⇒
    match x_v18244 as __v18245 in nat with
    | O ⇒ 0 | S x_v18246 ⇒ x_v18246
    end

program addn_i10 : nat → nat → nat =
  fn (x_v18249 : nat) (y_v18250 : nat) ⇒
    match x_v18249 as __v18251 in nat with
    | O ⇒ y_v18250 | S x_v18252 ⇒ (addn_i10 x_v18252 y_v18250).+1
    end

program subn_i11 : nat → nat → nat =
  fn (x_v18255 : nat) (y_v18256 : nat) ⇒
    match y_v18256 as __v18257 in nat with
    | O ⇒ x_v18255 | S y_v18258 ⇒ (subn_i11 (pred_i9 x_v18255) y_v18258)
    end

program muln_i12 : nat → nat → nat =
  fn (x_v18261 : nat) (y_v18262 : nat) ⇒
    match x_v18261 as __v18263 in nat with
    | O ⇒ 0
    | S x_v18264 ⇒ (addn_i10 y_v18262 (muln_i12 x_v18264 y_v18262))
    end

program divn_i13 : nat → nat → nat =
  fn (x_v18267 : nat) (y_v18268 : nat) ⇒
    match (ltn_i6 x_v18267 y_v18268) as __v18269 in nat with
    | true ⇒ 0
    | false ⇒ (divn_i13 (subn_i11 x_v18267 y_v18268) y_v18268).+1
    end

program modn_i14 : nat → nat → nat =
  fn (x_v18272 : nat) (y_v18273 : nat) ⇒
    (subn_i11 x_v18272 (muln_i12 (divn_i13 x_v18272 y_v18273) y_v18273))

inductive char_d1 : U =
| Char_c1 of (n_v18274 : nat) : char_d1

inductive string_d2 : U =
| EmptyString_c2 of : string_d2
| String_c3 of (c_v18275 : char_d1) (s_v18276 : string_d2) : string_d2

program cats_i15 : string_d2 → string_d2 → string_d2 =
  fn (s1_v18279 : string_d2) (s2_v18280 : string_d2) ⇒
    match s1_v18279 as __v18281 in string_d2 with
    | EmptyString_c2  ⇒ s2_v18280
    | String_c3 c_v18282 s1_v18283 ⇒
      (String_c3‹› c_v18282 (cats_i15 s1_v18283 s2_v18280))
    end

program strlen_i16 : string_d2 → nat =
  fn (s_v18285 : string_d2) ⇒
    match s_v18285 as __v18286 in nat with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v18287 s_v18288 ⇒ (strlen_i16 s_v18288).+1
    end

inductive list_d3 ‹s_s18289, t_s18290›
  (A_v18291 : Type‹s_s18289›) : Type‹t_s18290›
=
| nil_c4 of
    ‹s_s18292, t_s18293› (A_v18294 : Type‹s_s18292›)
    : (list_d3‹s_s18292, t_s18293› A_v18294)
| cons_c5 of
    ‹s_s18295, t_s18296› (A_v18297 : Type‹s_s18295›)
    (hd_v18298 : A_v18297)
    (tl_v18299 : (list_d3‹s_s18295, t_s18296› A_v18297))
    : (list_d3‹s_s18295, t_s18296› A_v18297)

program len_i17 ‹s_s18300, t_s18301› :
  ∀ {A_v18302 : Type‹s_s18300›} →
    (list_d3‹s_s18300, t_s18301› A_v18302) →
      nat ⊗ (list_d3‹s_s18300, t_s18301› A_v18302)
=
  fn {A_v18305 : Type‹s_s18300›}
     (xs_v18306 : (list_d3‹s_s18300, t_s18301› A_v18305)) ⇒
    match xs_v18306 as __v18307 in
      nat ⊗ (list_d3‹s_s18300, t_s18301› A_v18305) with
    | nil_c4  ⇒ ⟨0, nil_c4‹s_s18300, t_s18301›⟩
    | cons_c5 x_v18309 xs_v18310 ⇒
      match (len_i17‹s_s18300, t_s18301› A_v18305 xs_v18310) as __v18311 in
        nat ⊗ (list_d3‹s_s18300, t_s18301› A_v18305) with
      | ⟨n_v18313, xs_v18314⟩ ⇒
        ⟨n_v18313.+1, (cons_c5‹s_s18300, t_s18301› x_v18309 xs_v18314)⟩
      end
    end

program append_i18 ‹s_s18315, t_s18316› :
  ∀ {A_v18317 : Type‹s_s18315›} →
    (list_d3‹s_s18315, t_s18316› A_v18317) →
      (list_d3‹s_s18315, t_s18316› A_v18317) ⊸
        (list_d3‹s_s18315, t_s18316› A_v18317)
=
  fn {A_v18320 : Type‹s_s18315›}
     (xs_v18321 : (list_d3‹s_s18315, t_s18316› A_v18320)) ⇒
    ln (ys_v18322 : (list_d3‹s_s18315, t_s18316› A_v18320)) ⇒
      match xs_v18321 as __v18323 in
        (list_d3‹s_s18315, t_s18316› A_v18320) with
      | nil_c4  ⇒ ys_v18322
      | cons_c5 x_v18324 xs_v18325 ⇒
        (cons_c5‹s_s18315, t_s18316›
          x_v18324
          (append_i18‹s_s18315, t_s18316› A_v18320 xs_v18325 ys_v18322))
      end

logical stdin_rec_i19 : unit → proto =
  fn (__v18327 : unit) ⇒
    ⇑(b_v18328 : bool) ⇒
      match b_v18328 as __v18329 in proto with
      | true ⇒ ⇓(__v18330 : string_d2) ⇒ (stdin_rec_i19 ())
      | false ⇒ end
      end

logical stdout_rec_i20 : unit → proto =
  fn (__v18332 : unit) ⇒
    ⇑(b_v18333 : bool) ⇒
      match b_v18333 as __v18334 in proto with
      | true ⇒ ⇑(__v18335 : string_d2) ⇒ (stdout_rec_i20 ())
      | false ⇒ end
      end

logical stderr_rec_i21 : unit → proto =
  fn (__v18337 : unit) ⇒
    ⇑(b_v18338 : bool) ⇒
      match b_v18338 as __v18339 in proto with
      | true ⇒ ⇑(__v18340 : string_d2) ⇒ (stderr_rec_i21 ())
      | false ⇒ end
      end

logical stdin_t_i22 : proto = (stdin_rec_i19 ())

logical stdout_t_i23 : proto = (stdout_rec_i20 ())

logical stderr_t_i24 : proto = (stderr_rec_i21 ())

program readline_i25 : unit → IO string_d2 =
  fn (__v18342 : unit) ⇒
    let ch_v18343 ⇐ open stdin in
    let ch_v18344 ⇐ (send ch_v18343 true) in
    let __v18345 ⇐ recv ch_v18344 in
    match __v18345 as __v18346 in IO string_d2 with
    | ⟨s_v18347, ch_v18348⟩ ⇒
      let ch_v18349 ⇐ (send ch_v18348 false) in
      let __v18350 ⇐ close ch_v18349 in return s_v18347
    end

program print_i26 : string_d2 → IO unit =
  fn (s_v18352 : string_d2) ⇒
    let ch_v18353 ⇐ open stdout in
    let ch_v18354 ⇐ (send ch_v18353 true) in
    let ch_v18355 ⇐ (send ch_v18354 s_v18352) in
    let ch_v18356 ⇐ (send ch_v18355 false) in close ch_v18356

program prerr_i27 : string_d2 → IO unit =
  fn (s_v18358 : string_d2) ⇒
    let ch_v18359 ⇐ open stderr in
    let ch_v18360 ⇐ (send ch_v18359 true) in
    let ch_v18361 ⇐ (send ch_v18360 s_v18358) in
    let ch_v18362 ⇐ (send ch_v18361 false) in close ch_v18362

program digits_i28 : (list_d3‹U, U› string_d2) =
  (cons_c5‹U, U›
    "0"
    (cons_c5‹U, U›
      "1"
      (cons_c5‹U, U›
        "2"
        (cons_c5‹U, U›
          "3"
          (cons_c5‹U, U›
            "4"
            (cons_c5‹U, U›
              "5"
              (cons_c5‹U, U›
                "6"
                (cons_c5‹U, U›
                  "7"
                  (cons_c5‹U, U›
                    "8" (cons_c5‹U, U› "9" nil_c4‹U, U›))))))))))

program get_at_i29 :
  ∀ {A_v18363 : U} →
    nat → (list_d3‹U, U› A_v18363) → A_v18363 → A_v18363
=
  fn {A_v18367 : U} (n_v18368 : nat)
     (xs_v18369 : (list_d3‹U, U› A_v18367)) (a_v18370 : A_v18367) ⇒
    match n_v18368 as __v18371 in A_v18367 with
    | O ⇒
      match xs_v18369 as __v18372 in A_v18367 with
      | nil_c4  ⇒ a_v18370 | cons_c5 x_v18373 __v18374 ⇒ x_v18373
      end
    | S n_v18375 ⇒
      match xs_v18369 as __v18376 in A_v18367 with
      | nil_c4  ⇒ a_v18370
      | cons_c5 __v18377 xs_v18378 ⇒
        (get_at_i29 A_v18367 n_v18375 xs_v18378 a_v18370)
      end
    end

program string_of_digit_i30 : nat → string_d2 =
  fn (n_v18380 : nat) ⇒
    (get_at_i29 string_d2 n_v18380 digits_i28 EmptyString_c2‹›)

program string_of_nat_i31 : nat → string_d2 =
  fn (n_v18382 : nat) ⇒
    let s_v18383 = (string_of_digit_i30 (modn_i14 n_v18382 10)) in
    let n_v18384 = (divn_i13 n_v18382 10) in
    match (ltn_i6 0 n_v18384) as __v18385 in string_d2 with
    | true ⇒ (cats_i15 (string_of_nat_i31 n_v18384) s_v18383)
    | false ⇒ s_v18383
    end

program gcd_i32 : nat → nat → nat =
  fn (a_v18388 : nat) (b_v18389 : nat) ⇒
    match b_v18389 as __v18390 in nat with
    | O ⇒ a_v18388
    | S __v18391 ⇒ (gcd_i32 b_v18389 (modn_i14 a_v18388 b_v18389))
    end

program lcm_i33 : nat → nat → nat =
  fn (a_v18394 : nat) (b_v18395 : nat) ⇒
    (divn_i13 (muln_i12 a_v18394 b_v18395) (gcd_i32 a_v18394 b_v18395))

program powm_i34 : nat → nat → nat → nat =
  fn (a_v18399 : nat) (b_v18400 : nat) (m_v18401 : nat) ⇒
    match b_v18400 as __v18402 in nat with
    | O ⇒ 1
    | S b_v18403 ⇒
      (modn_i14
        (muln_i12 a_v18399 (powm_i34 a_v18399 b_v18403 m_v18401)) m_v18401)
    end

logical coprime_i35 : nat → nat → U =
  fn (a_v18406 : nat) (b_v18407 : nat) ⇒ (gcd_i32 a_v18406 b_v18407) ≡ 1

logical RSA_i36 : proto =
  ⇑{x_v18408 : nat} ⇒
    ⇑{y_v18409 : nat} ⇒
      ⇑(n_v18410 : nat) ⇒
        ⇑{__v18411 : n_v18410 ≡ (muln_i12 x_v18408 y_v18409)} ⇒
          ⇑{tot_v18412 : nat} ⇒
            ⇑{__v18413 :
              tot_v18412 ≡
                (lcm_i33 (subn_i11 x_v18408 1) (subn_i11 y_v18409 1))} ⇒
              ⇑(e_v18414 : nat) ⇒
                ⇑{__v18415 : (coprime_i35 e_v18414 tot_v18412)} ⇒
                  ⇑{__v18416 : (ltn_i6 1 e_v18414) ≡ true} ⇒
                    ⇑{__v18417 : (ltn_i6 e_v18414 tot_v18412) ≡ true} ⇒
                      ⇓{P0_v18418 : nat} ⇒
                        ⇓(C_v18419 : nat) ⇒
                          ⇓{__v18420 :
                            C_v18419 ≡
                              (powm_i34 P0_v18418 e_v18414 n_v18410)} ⇒
                            end

logical RSA_ch_i37 : L = ch⟨RSA_i36⟩

logical RSA_hc_i38 : L = hc⟨RSA_i36⟩

program server_i39 : RSA_ch_i37 → IO unit =
  fn (ch_v18422 : RSA_ch_i37) ⇒
    let x_v18423 = 61 in
    let y_v18424 = 53 in
    let n_v18425 = (muln_i12 x_v18423 y_v18424) in
    let tot_v18426 = (lcm_i33 (subn_i11 x_v18423 1) (subn_i11 y_v18424 1)) in
    let e_v18427 = 17 in
    let d_v18428 = 413 in
    let ch_v18429 ⇐ (send ch_v18422 x_v18423) in
    let ch_v18430 ⇐ (send ch_v18429 y_v18424) in
    let ch_v18431 ⇐ (send ch_v18430 n_v18425) in
    let ch_v18432 ⇐ (send ch_v18431 refl 3233) in
    let ch_v18433 ⇐ (send ch_v18432 tot_v18426) in
    let ch_v18434 ⇐ (send ch_v18433 refl (lcm_i33 60 52)) in
    let ch_v18435 ⇐ (send ch_v18434 e_v18427) in
    let ch_v18436 ⇐ (send ch_v18435 refl (gcd_i32 17 780)) in
    let ch_v18437 ⇐ (send ch_v18436 refl true) in
    let ch_v18438 ⇐ (send ch_v18437 refl (ltn_i6 17 (lcm_i33 60 52))) in
    let __v18439 ⇐ recv ch_v18438 in
    match __v18439 as __v18440 in IO unit with
    | ⟨{P0_v18441}, ch_v18442⟩ ⇒
      let __v18443 ⇐ recv ch_v18442 in
      match __v18443 as __v18444 in IO unit with
      | ⟨C_v18445, ch_v18446⟩ ⇒
        let __v18447 ⇐ recv ch_v18446 in
        match __v18447 as __v18448 in IO unit with
        | ⟨{pf_v18449}, ch_v18450⟩ ⇒
          let P1_v18451 = (powm_i34 C_v18445 d_v18428 n_v18425) in
          let __v18452 ⇐ close ch_v18450 in
          (print_i26 (cats_i15 (string_of_nat_i31 P1_v18451) "\n"))
        end
      end
    end

program client_i40 : RSA_hc_i38 → IO unit =
  fn (ch_v18454 : RSA_hc_i38) ⇒
    let P0_v18455 = 123 in
    let __v18456 ⇐ recv ch_v18454 in
    match __v18456 as __v18457 in IO unit with
    | ⟨{x_v18458}, ch_v18459⟩ ⇒
      let __v18460 ⇐ recv ch_v18459 in
      match __v18460 as __v18461 in IO unit with
      | ⟨{y_v18462}, ch_v18463⟩ ⇒
        let __v18464 ⇐ recv ch_v18463 in
        match __v18464 as __v18465 in IO unit with
        | ⟨n_v18466, ch_v18467⟩ ⇒
          let __v18468 ⇐ recv ch_v18467 in
          match __v18468 as __v18469 in IO unit with
          | ⟨{pf1_v18470}, ch_v18471⟩ ⇒
            let __v18472 ⇐ recv ch_v18471 in
            match __v18472 as __v18473 in IO unit with
            | ⟨{tot_v18474}, ch_v18475⟩ ⇒
              let __v18476 ⇐ recv ch_v18475 in
              match __v18476 as __v18477 in IO unit with
              | ⟨{pf2_v18478}, ch_v18479⟩ ⇒
                let __v18480 ⇐ recv ch_v18479 in
                match __v18480 as __v18481 in IO unit with
                | ⟨e_v18482, ch_v18483⟩ ⇒
                  let __v18484 ⇐ recv ch_v18483 in
                  match __v18484 as __v18485 in IO unit with
                  | ⟨{pf3_v18486}, ch_v18487⟩ ⇒
                    let __v18488 ⇐ recv ch_v18487 in
                    match __v18488 as __v18489 in IO unit with
                    | ⟨{pf4_v18490}, ch_v18491⟩ ⇒
                      let __v18492 ⇐ recv ch_v18491 in
                      match __v18492 as __v18493 in IO unit with
                      | ⟨{pf5_v18494}, ch_v18495⟩ ⇒
                        let ch_v18496 ⇐ (send ch_v18495 P0_v18455) in
                        let ch_v18497 ⇐
                          (send ch_v18496
                            (powm_i34 P0_v18455 e_v18482 n_v18466))
                        in
                        let ch_v18498 ⇐
                          (send ch_v18497
                            refl (powm_i34 123 e_v18482 n_v18466))
                        in close ch_v18498
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

program main_i41 : IO unit =
  let c_v18499 ⇐ fork (c_v18500 : RSA_ch_i37) in (server_i39 c_v18500) in
  let c0_v18501 ⇐
    fork (c0_v18502 : ch⟨⇓(__v18503 : RSA_hc_i38) ⇒ end⟩) in
      let __v18504 ⇐ recv c0_v18502 in
      match __v18504 as __v18505 in IO unit with
      | ⟨c_v18506, c0_v18507⟩ ⇒
        let __v18508 ⇐ close c0_v18507 in (client_i40 c_v18506)
      end
  in
  let c0_v18509 ⇐ (send c0_v18501 c_v18499) in
  let __v18510 ⇐ close c0_v18509 in sleep 1

trans1e success--------------------------

def andb_i1 =
  fn b1_v19400 b2_v19401 ⇒
    match b1_v19400 with
    | true ⇒ b2_v19401 | false ⇒ false
    end

def orb_i2 =
  fn b1_v19402 b2_v19403 ⇒
    match b1_v19402 with
    | true ⇒ true | false ⇒ b2_v19403
    end

def notb_i3 =
  fn b_v19404 ⇒ match b_v19404 with
                  | true ⇒ false | false ⇒ true
                  end

def lten_i4 =
  fn x_v19405 y_v19406 ⇒
    match x_v19405 with
    | O ⇒ true
    | S x_v19407 ⇒
      match y_v19406 with
      | O ⇒ false | S y_v19408 ⇒ ((lten_i4 x_v19407) y_v19408)
      end
    end

def gten_i5 =
  fn x_v19409 y_v19410 ⇒
    match x_v19409 with
    | O ⇒ match y_v19410 with
            | O ⇒ true | S __v19411 ⇒ false
            end
    | S x_v19412 ⇒
      match y_v19410 with
      | O ⇒ true | S y_v19413 ⇒ ((gten_i5 x_v19412) y_v19413)
      end
    end

def ltn_i6 =
  fn x_v19414 y_v19415 ⇒
    match x_v19414 with
    | O ⇒ match y_v19415 with
            | O ⇒ false | S y_v19416 ⇒ true
            end
    | S x_v19417 ⇒
      match y_v19415 with
      | O ⇒ false | S y_v19418 ⇒ ((ltn_i6 x_v19417) y_v19418)
      end
    end

def gtn_i7 =
  fn x_v19419 y_v19420 ⇒
    match x_v19419 with
    | O ⇒ false
    | S x_v19421 ⇒
      match y_v19420 with
      | O ⇒ true | S y_v19422 ⇒ ((gtn_i7 x_v19421) y_v19422)
      end
    end

def eqn_i8 =
  fn x_v19423 y_v19424 ⇒
    match x_v19423 with
    | O ⇒ match y_v19424 with
            | O ⇒ true | S __v19425 ⇒ false
            end
    | S x_v19426 ⇒
      match y_v19424 with
      | O ⇒ false | S y_v19427 ⇒ ((eqn_i8 x_v19426) y_v19427)
      end
    end

def pred_i9 =
  fn x_v19428 ⇒ match x_v19428 with
                  | O ⇒ 0 | S x_v19429 ⇒ x_v19429
                  end

def addn_i10 =
  fn x_v19430 y_v19431 ⇒
    match x_v19430 with
    | O ⇒ y_v19431 | S x_v19432 ⇒ ((addn_i10 x_v19432) y_v19431).+1
    end

def subn_i11 =
  fn x_v19433 y_v19434 ⇒
    match y_v19434 with
    | O ⇒ x_v19433
    | S y_v19435 ⇒ ((subn_i11 (pred_i9 x_v19433)) y_v19435)
    end

def muln_i12 =
  fn x_v19436 y_v19437 ⇒
    match x_v19436 with
    | O ⇒ 0
    | S x_v19438 ⇒ ((addn_i10 y_v19437) ((muln_i12 x_v19438) y_v19437))
    end

def divn_i13 =
  fn x_v19439 y_v19440 ⇒
    match ((ltn_i6 x_v19439) y_v19440) with
    | true ⇒ 0
    | false ⇒ ((divn_i13 ((subn_i11 x_v19439) y_v19440)) y_v19440).+1
    end

def modn_i14 =
  fn x_v19441 y_v19442 ⇒
    ((subn_i11 x_v19441)
      ((muln_i12 ((divn_i13 x_v19441) y_v19442)) y_v19442))

data char_d1 =
| Char_c1 of size(1)

data string_d2 =
| EmptyString_c2 of size(0) | String_c3 of size(2)

def cats_i15 =
  fn s1_v19443 s2_v19444 ⇒
    match s1_v19443 with
    | EmptyString_c2  ⇒ s2_v19444
    | String_c3 c_v19445 s1_v19446 ⇒
      (String_c3 c_v19445 ((cats_i15 s1_v19446) s2_v19444))
    end

def strlen_i16 =
  fn s_v19447 ⇒
    match s_v19447 with
    | EmptyString_c2  ⇒ 0
    | String_c3 __v19448 s_v19449 ⇒ (strlen_i16 s_v19449).+1
    end

data listUU_d7 =
| nilUU_c12 of size(0) | consUU_c13 of size(2)

data listUL_d6 =
| nilUL_c10 of size(0) | consUL_c11 of size(2)

data listLU_d5 =
| nilLU_c8 of size(0)

data listLL_d4 =
| nilLL_c6 of size(0) | consLL_c7 of size(2)

def lenUU_i45 =
  fn A_v19450 xs_v19451 ⇒
    match xs_v19451 with
    | nilUU_c12  ⇒ (0, nilUU_c12)
    | consUU_c13 x_v19452 xs_v19453 ⇒
      match ((lenUU_i45 NULL) xs_v19453) with
      | (n_v19454, xs_v19455) ⇒
        (n_v19454.+1, (consUU_c13 x_v19452 xs_v19455))
      end
    end

def lenUL_i44 =
  fn A_v19456 xs_v19457 ⇒
    match xs_v19457 with
    | nilUL_c10  ⇒ (0, nilUL_c10)
    | consUL_c11 x_v19458 xs_v19459 ⇒
      match ((lenUL_i44 NULL) xs_v19459) with
      | (n_v19460, xs_v19461) ⇒
        (n_v19460.+1, (consUL_c11 x_v19458 xs_v19461))
      end
    end

def lenLL_i42 =
  fn A_v19462 xs_v19463 ⇒
    match xs_v19463 with
    | nilLL_c6  ⇒ (0, nilLL_c6)
    | consLL_c7 x_v19464 xs_v19465 ⇒
      match ((lenLL_i42 NULL) xs_v19465) with
      | (n_v19466, xs_v19467) ⇒
        (n_v19466.+1, (consLL_c7 x_v19464 xs_v19467))
      end
    end

def appendUU_i49 =
  fn A_v19468 xs_v19469 ⇒
    ln ys_v19470 ⇒
      match xs_v19469 with
      | nilUU_c12  ⇒ ys_v19470
      | consUU_c13 x_v19471 xs_v19472 ⇒
        (consUU_c13 x_v19471 (((appendUU_i49 NULL) xs_v19472) ys_v19470))
      end

def appendUL_i48 =
  fn A_v19473 xs_v19474 ⇒
    ln ys_v19475 ⇒
      match xs_v19474 with
      | nilUL_c10  ⇒ ys_v19475
      | consUL_c11 x_v19476 xs_v19477 ⇒
        (consUL_c11 x_v19476 (((appendUL_i48 NULL) xs_v19477) ys_v19475))
      end

def appendLL_i46 =
  fn A_v19478 xs_v19479 ⇒
    ln ys_v19480 ⇒
      match xs_v19479 with
      | nilLL_c6  ⇒ ys_v19480
      | consLL_c7 x_v19481 xs_v19482 ⇒
        (consLL_c7 x_v19481 (((appendLL_i46 NULL) xs_v19482) ys_v19480))
      end

def readline_i25 =
  fn __v19483 ⇒
    let ch_v19484 ⇐ open stdin in
    let ch_v19485 ⇐ (send ch_v19484 true) in
    let __v19486 ⇐ recv ch_v19485 in
    match __v19486 with
    | (s_v19487, ch_v19488) ⇒
      let ch_v19489 ⇐ (send ch_v19488 false) in
      let __v19490 ⇐ close⇑ ch_v19489 in return s_v19487
    end

def print_i26 =
  fn s_v19491 ⇒
    let ch_v19492 ⇐ open stdout in
    let ch_v19493 ⇐ (send ch_v19492 true) in
    let ch_v19494 ⇐ (send ch_v19493 s_v19491) in
    let ch_v19495 ⇐ (send ch_v19494 false) in close⇑ ch_v19495

def prerr_i27 =
  fn s_v19496 ⇒
    let ch_v19497 ⇐ open stderr in
    let ch_v19498 ⇐ (send ch_v19497 true) in
    let ch_v19499 ⇐ (send ch_v19498 s_v19496) in
    let ch_v19500 ⇐ (send ch_v19499 false) in close⇑ ch_v19500

def digits_i28 =
  (consUU_c13
    "0"
    (consUU_c13
      "1"
      (consUU_c13
        "2"
        (consUU_c13
          "3"
          (consUU_c13
            "4"
            (consUU_c13
              "5"
              (consUU_c13
                "6"
                (consUU_c13 "7" (consUU_c13 "8" (consUU_c13 "9" nilUU_c12))))))))))

def get_at_i29 =
  fn A_v19501 n_v19502 xs_v19503 a_v19504 ⇒
    match n_v19502 with
    | O ⇒
      match xs_v19503 with
      | nilUU_c12  ⇒ a_v19504 | consUU_c13 x_v19505 __v19506 ⇒ x_v19505
      end
    | S n_v19507 ⇒
      match xs_v19503 with
      | nilUU_c12  ⇒ a_v19504
      | consUU_c13 __v19508 xs_v19509 ⇒
        ((((get_at_i29 NULL) n_v19507) xs_v19509) a_v19504)
      end
    end

def string_of_digit_i30 =
  fn n_v19510 ⇒ ((((get_at_i29 NULL) n_v19510) digits_i28) EmptyString_c2)

def string_of_nat_i31 =
  fn n_v19511 ⇒
    let s_v19512 = (string_of_digit_i30 ((modn_i14 n_v19511) 10)) in
    let n_v19513 = ((divn_i13 n_v19511) 10) in
    match ((ltn_i6 0) n_v19513) with
    | true ⇒ ((cats_i15 (string_of_nat_i31 n_v19513)) s_v19512)
    | false ⇒ s_v19512
    end

def gcd_i32 =
  fn a_v19514 b_v19515 ⇒
    match b_v19515 with
    | O ⇒ a_v19514
    | S __v19516 ⇒ ((gcd_i32 b_v19515) ((modn_i14 a_v19514) b_v19515))
    end

def lcm_i33 =
  fn a_v19517 b_v19518 ⇒
    ((divn_i13 ((muln_i12 a_v19517) b_v19518)) ((gcd_i32 a_v19517) b_v19518))

def powm_i34 =
  fn a_v19519 b_v19520 m_v19521 ⇒
    match b_v19520 with
    | O ⇒ 1
    | S b_v19522 ⇒
      ((modn_i14
         ((muln_i12 a_v19519) (((powm_i34 a_v19519) b_v19522) m_v19521)))
        m_v19521)
    end

def server_i39 =
  fn ch_v19523 ⇒
    let x_v19524 = 61 in
    let y_v19525 = 53 in
    let n_v19526 = ((muln_i12 x_v19524) y_v19525) in
    let tot_v19527 =
      ((lcm_i33 ((subn_i11 x_v19524) 1)) ((subn_i11 y_v19525) 1))
    in
    let e_v19528 = 17 in
    let d_v19529 = 413 in
    let ch_v19530 ⇐ ({send} ch_v19523 NULL) in
    let ch_v19531 ⇐ ({send} ch_v19530 NULL) in
    let ch_v19532 ⇐ (send ch_v19531 n_v19526) in
    let ch_v19533 ⇐ ({send} ch_v19532 NULL) in
    let ch_v19534 ⇐ ({send} ch_v19533 NULL) in
    let ch_v19535 ⇐ ({send} ch_v19534 NULL) in
    let ch_v19536 ⇐ (send ch_v19535 e_v19528) in
    let ch_v19537 ⇐ ({send} ch_v19536 NULL) in
    let ch_v19538 ⇐ ({send} ch_v19537 NULL) in
    let ch_v19539 ⇐ ({send} ch_v19538 NULL) in
    let __v19540 ⇐ {recv} ch_v19539 in
    match __v19540 with
    | (P0_v19541, ch_v19542) ⇒
      let __v19543 ⇐ recv ch_v19542 in
      match __v19543 with
      | (C_v19544, ch_v19545) ⇒
        let __v19546 ⇐ {recv} ch_v19545 in
        match __v19546 with
        | (pf_v19547, ch_v19548) ⇒
          let P1_v19549 = (((powm_i34 C_v19544) d_v19529) n_v19526) in
          let __v19550 ⇐ close⇑ ch_v19548 in
          (print_i26 ((cats_i15 (string_of_nat_i31 P1_v19549)) "\n"))
        end
      end
    end

def client_i40 =
  fn ch_v19551 ⇒
    let P0_v19552 = 123 in
    let __v19553 ⇐ {recv} ch_v19551 in
    match __v19553 with
    | (x_v19554, ch_v19555) ⇒
      let __v19556 ⇐ {recv} ch_v19555 in
      match __v19556 with
      | (y_v19557, ch_v19558) ⇒
        let __v19559 ⇐ recv ch_v19558 in
        match __v19559 with
        | (n_v19560, ch_v19561) ⇒
          let __v19562 ⇐ {recv} ch_v19561 in
          match __v19562 with
          | (pf1_v19563, ch_v19564) ⇒
            let __v19565 ⇐ {recv} ch_v19564 in
            match __v19565 with
            | (tot_v19566, ch_v19567) ⇒
              let __v19568 ⇐ {recv} ch_v19567 in
              match __v19568 with
              | (pf2_v19569, ch_v19570) ⇒
                let __v19571 ⇐ recv ch_v19570 in
                match __v19571 with
                | (e_v19572, ch_v19573) ⇒
                  let __v19574 ⇐ {recv} ch_v19573 in
                  match __v19574 with
                  | (pf3_v19575, ch_v19576) ⇒
                    let __v19577 ⇐ {recv} ch_v19576 in
                    match __v19577 with
                    | (pf4_v19578, ch_v19579) ⇒
                      let __v19580 ⇐ {recv} ch_v19579 in
                      match __v19580 with
                      | (pf5_v19581, ch_v19582) ⇒
                        let ch_v19583 ⇐ ({send} ch_v19582 NULL) in
                        let ch_v19584 ⇐
                          (send ch_v19583
                            (((powm_i34 P0_v19552) e_v19572) n_v19560))
                        in
                        let ch_v19585 ⇐ ({send} ch_v19584 NULL) in
                        close⇓ ch_v19585
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

main =
  let c_v19586 ⇐ fork c_v19587 in (server_i39 c_v19587) in
  let c0_v19588 ⇐
    fork c0_v19589 in
      let __v19590 ⇐ recv c0_v19589 in
      match __v19590 with
      | (c_v19591, c0_v19592) ⇒
        let __v19593 ⇐ close⇑ c0_v19592 in (client_i40 c_v19591)
      end
  in
  let c0_v19594 ⇐ (send c0_v19588 c_v19586) in
  let __v19595 ⇐ close⇓ c0_v19594 in sleep 1

trans12 success--------------------------

fun andb_i1(b1_v19907, b2_v19908) = if b1_v19907 then
                                      b2_v19908
                                    else
                                      0

val andbclo_i50 = fn b1_v19909 b2_v19910 ⇒ andb_i1(b1_v19909, b2_v19910)

fun orb_i2(b1_v19911, b2_v19912) = if b1_v19911 then
                                     1
                                   else
                                     b2_v19912

val orbclo_i51 = fn b1_v19913 b2_v19914 ⇒ orb_i2(b1_v19913, b2_v19914)

fun notb_i3(b_v19915) = if b_v19915 then
                          0
                        else
                          1

val notbclo_i52 = fn b_v19916 ⇒ notb_i3(b_v19916)

fun lten_i4(x_v19917, y_v19918) =
  let __v19919 = x_v19917 in
  if __v19919 then
    let x_v19920 = __v19919.-1 in
    let __v19921 = y_v19918 in
    if __v19921 then
      let y_v19922 = __v19921.-1 in lten_i4(x_v19920, y_v19922)
    else
      0
  else
    1

val ltenclo_i53 = fn x_v19923 y_v19924 ⇒ lten_i4(x_v19923, y_v19924)

fun gten_i5(x_v19925, y_v19926) =
  let __v19927 = x_v19925 in
  if __v19927 then
    let x_v19928 = __v19927.-1 in
    let __v19929 = y_v19926 in
    if __v19929 then
      let y_v19930 = __v19929.-1 in gten_i5(x_v19928, y_v19930)
    else
      1
  else
    let __v19931 = y_v19926 in
    if __v19931 then
      let __v19932 = __v19931.-1 in 0
    else
      1

val gtenclo_i54 = fn x_v19933 y_v19934 ⇒ gten_i5(x_v19933, y_v19934)

fun ltn_i6(x_v19935, y_v19936) =
  let __v19937 = x_v19935 in
  if __v19937 then
    let x_v19938 = __v19937.-1 in
    let __v19939 = y_v19936 in
    if __v19939 then
      let y_v19940 = __v19939.-1 in ltn_i6(x_v19938, y_v19940)
    else
      0
  else
    let __v19941 = y_v19936 in
    if __v19941 then
      let y_v19942 = __v19941.-1 in 1
    else
      0

val ltnclo_i55 = fn x_v19943 y_v19944 ⇒ ltn_i6(x_v19943, y_v19944)

fun gtn_i7(x_v19945, y_v19946) =
  let __v19947 = x_v19945 in
  if __v19947 then
    let x_v19948 = __v19947.-1 in
    let __v19949 = y_v19946 in
    if __v19949 then
      let y_v19950 = __v19949.-1 in gtn_i7(x_v19948, y_v19950)
    else
      1
  else
    0

val gtnclo_i56 = fn x_v19951 y_v19952 ⇒ gtn_i7(x_v19951, y_v19952)

fun eqn_i8(x_v19953, y_v19954) =
  let __v19955 = x_v19953 in
  if __v19955 then
    let x_v19956 = __v19955.-1 in
    let __v19957 = y_v19954 in
    if __v19957 then
      let y_v19958 = __v19957.-1 in eqn_i8(x_v19956, y_v19958)
    else
      0
  else
    let __v19959 = y_v19954 in
    if __v19959 then
      let __v19960 = __v19959.-1 in 0
    else
      1

val eqnclo_i57 = fn x_v19961 y_v19962 ⇒ eqn_i8(x_v19961, y_v19962)

fun pred_i9(x_v19963) =
  let __v19964 = x_v19963 in
  if __v19964 then
    let x_v19965 = __v19964.-1 in x_v19965
  else
    0

val predclo_i58 = fn x_v19966 ⇒ pred_i9(x_v19966)

fun addn_i10(x_v19967, y_v19968) =
  let __v19969 = x_v19967 in
  if __v19969 then
    let x_v19970 = __v19969.-1 in addn_i10(x_v19970, y_v19968).+1
  else
    y_v19968

val addnclo_i59 = fn x_v19971 y_v19972 ⇒ addn_i10(x_v19971, y_v19972)

fun subn_i11(x_v19973, y_v19974) =
  let __v19975 = y_v19974 in
  if __v19975 then
    let y_v19976 = __v19975.-1 in subn_i11(pred_i9(x_v19973), y_v19976)
  else
    x_v19973

val subnclo_i60 = fn x_v19977 y_v19978 ⇒ subn_i11(x_v19977, y_v19978)

fun muln_i12(x_v19979, y_v19980) =
  let __v19981 = x_v19979 in
  if __v19981 then
    let x_v19982 = __v19981.-1 in
    addn_i10(y_v19980, muln_i12(x_v19982, y_v19980))
  else
    0

val mulnclo_i61 = fn x_v19983 y_v19984 ⇒ muln_i12(x_v19983, y_v19984)

fun divn_i13(x_v19985, y_v19986) =
  if ltn_i6(x_v19985, y_v19986) then
    0
  else
    divn_i13(subn_i11(x_v19985, y_v19986), y_v19986).+1

val divnclo_i62 = fn x_v19987 y_v19988 ⇒ divn_i13(x_v19987, y_v19988)

fun modn_i14(x_v19989, y_v19990) =
  subn_i11(x_v19989, muln_i12(divn_i13(x_v19989, y_v19990), y_v19990))

val modnclo_i63 = fn x_v19991 y_v19992 ⇒ modn_i14(x_v19991, y_v19992)

fun cats_i15(s1_v19993, s2_v19994) =
  match s1_v19993 with
  | EmptyString_c2  ⇒ s2_v19994
  | String_c3 c_v19995 s1_v19996 ⇒
    (String_c3 c_v19995 cats_i15(s1_v19996, s2_v19994))
  end

val catsclo_i64 = fn s1_v19997 s2_v19998 ⇒ cats_i15(s1_v19997, s2_v19998)

fun strlen_i16(s_v19999) =
  match s_v19999 with
  | EmptyString_c2  ⇒ 0
  | String_c3 __v20000 s_v20001 ⇒ strlen_i16(s_v20001).+1
  end

val strlenclo_i65 = fn s_v20002 ⇒ strlen_i16(s_v20002)

fun lenUU_i45(A_v20003, xs_v20004) =
  match xs_v20004 with
  | nilUU_c12  ⇒ (0, nilUU_c12)
  | consUU_c13 x_v20005 xs_v20006 ⇒
    match lenUU_i45(NULL, xs_v20006) with
    | (n_v20007, xs_v20008) ⇒
      (n_v20007.+1, (consUU_c13 x_v20005 xs_v20008))
    end
  end

val lenUUclo_i66 = fn A_v20009 xs_v20010 ⇒ lenUU_i45(A_v20009, xs_v20010)

fun lenUL_i44(A_v20011, xs_v20012) =
  match xs_v20012 with
  | nilUL_c10  ⇒ (0, nilUL_c10)
  | consUL_c11 x_v20013 xs_v20014 ⇒
    match lenUL_i44(NULL, xs_v20014) with
    | (n_v20015, xs_v20016) ⇒
      (n_v20015.+1, (consUL_c11 x_v20013 xs_v20016))
    end
  end

val lenULclo_i67 = fn A_v20017 xs_v20018 ⇒ lenUL_i44(A_v20017, xs_v20018)

fun lenLL_i42(A_v20019, xs_v20020) =
  match xs_v20020 with
  | nilLL_c6  ⇒ (0, nilLL_c6)
  | consLL_c7 x_v20021 xs_v20022 ⇒
    match lenLL_i42(NULL, xs_v20022) with
    | (n_v20023, xs_v20024) ⇒ (n_v20023.+1, (consLL_c7 x_v20021 xs_v20024))
    end
  end

val lenLLclo_i68 = fn A_v20025 xs_v20026 ⇒ lenLL_i42(A_v20025, xs_v20026)

fun appendUU_i49(A_v20027, xs_v20028, ys_v20029) =
  match xs_v20028 with
  | nilUU_c12  ⇒ ys_v20029
  | consUU_c13 x_v20030 xs_v20031 ⇒
    (consUU_c13 x_v20030 appendUU_i49(NULL, xs_v20031, ys_v20029))
  end

val appendUUclo_i69 =
  fn A_v20032 xs_v20033 ⇒
    ln ys_v20034 ⇒ appendUU_i49(A_v20032, xs_v20033, ys_v20034)

fun appendUL_i48(A_v20035, xs_v20036, ys_v20037) =
  match xs_v20036 with
  | nilUL_c10  ⇒ ys_v20037
  | consUL_c11 x_v20038 xs_v20039 ⇒
    (consUL_c11 x_v20038 appendUL_i48(NULL, xs_v20039, ys_v20037))
  end

val appendULclo_i70 =
  fn A_v20040 xs_v20041 ⇒
    ln ys_v20042 ⇒ appendUL_i48(A_v20040, xs_v20041, ys_v20042)

fun appendLL_i46(A_v20043, xs_v20044, ys_v20045) =
  match xs_v20044 with
  | nilLL_c6  ⇒ ys_v20045
  | consLL_c7 x_v20046 xs_v20047 ⇒
    (consLL_c7 x_v20046 appendLL_i46(NULL, xs_v20047, ys_v20045))
  end

val appendLLclo_i71 =
  fn A_v20048 xs_v20049 ⇒
    ln ys_v20050 ⇒ appendLL_i46(A_v20048, xs_v20049, ys_v20050)

fun readline_i25(__v20051) =
  ln __v20052 ⇒
    let ch_v20053 = (ln __v20054 ⇒ open stdin) NULL in
    let ch_v20055 =
      ((fn x_v20056 ⇒ ln __v20057 ⇒ send(ch_v20053, x_v20056)) 1) NULL
    in
    let __v20058 = (ln __v20059 ⇒ recv(ch_v20055)) NULL in
    (match __v20058 with
     | (s_v20060, ch_v20061) ⇒
       ln __v20062 ⇒
         let ch_v20063 =
           ((fn x_v20064 ⇒ ln __v20065 ⇒ send(ch_v20061, x_v20064)) 0)
             NULL
         in
         let __v20066 =
           (ln __v20067 ⇒ let __v20068 = ch_v20063 in NULL) NULL
         in (ln __v20069 ⇒ s_v20060) NULL
     end) NULL

val readlineclo_i72 = fn __v20070 ⇒ readline_i25(__v20070)

fun print_i26(s_v20071) =
  ln __v20072 ⇒
    let ch_v20073 = (ln __v20074 ⇒ open stdout) NULL in
    let ch_v20075 =
      ((fn x_v20076 ⇒ ln __v20077 ⇒ send(ch_v20073, x_v20076)) 1) NULL
    in
    let ch_v20078 =
      ((fn x_v20079 ⇒ ln __v20080 ⇒ send(ch_v20075, x_v20079)) s_v20071)
        NULL
    in
    let ch_v20081 =
      ((fn x_v20082 ⇒ ln __v20083 ⇒ send(ch_v20078, x_v20082)) 0) NULL
    in (ln __v20084 ⇒ let __v20085 = ch_v20081 in NULL) NULL

val printclo_i73 = fn s_v20086 ⇒ print_i26(s_v20086)

fun prerr_i27(s_v20087) =
  ln __v20088 ⇒
    let ch_v20089 = (ln __v20090 ⇒ open stderr) NULL in
    let ch_v20091 =
      ((fn x_v20092 ⇒ ln __v20093 ⇒ send(ch_v20089, x_v20092)) 1) NULL
    in
    let ch_v20094 =
      ((fn x_v20095 ⇒ ln __v20096 ⇒ send(ch_v20091, x_v20095)) s_v20087)
        NULL
    in
    let ch_v20097 =
      ((fn x_v20098 ⇒ ln __v20099 ⇒ send(ch_v20094, x_v20098)) 0) NULL
    in (ln __v20100 ⇒ let __v20101 = ch_v20097 in NULL) NULL

val prerrclo_i74 = fn s_v20102 ⇒ prerr_i27(s_v20102)

val digits_i28 =
  (consUU_c13
    "0"
    (consUU_c13
      "1"
      (consUU_c13
        "2"
        (consUU_c13
          "3"
          (consUU_c13
            "4"
            (consUU_c13
              "5"
              (consUU_c13
                "6"
                (consUU_c13 "7" (consUU_c13 "8" (consUU_c13 "9" nilUU_c12))))))))))

fun get_at_i29(A_v20103, n_v20104, xs_v20105, a_v20106) =
  let __v20107 = n_v20104 in
  if __v20107 then
    let n_v20108 = __v20107.-1 in
    match xs_v20105 with
    | nilUU_c12  ⇒ a_v20106
    | consUU_c13 __v20109 xs_v20110 ⇒
      get_at_i29(NULL, n_v20108, xs_v20110, a_v20106)
    end
  else
    match xs_v20105 with
    | nilUU_c12  ⇒ a_v20106 | consUU_c13 x_v20111 __v20112 ⇒ x_v20111
    end

val get_atclo_i75 =
  fn A_v20113 n_v20114 xs_v20115 a_v20116 ⇒
    get_at_i29(A_v20113, n_v20114, xs_v20115, a_v20116)

fun string_of_digit_i30(n_v20117) =
  get_at_i29(NULL, n_v20117, digits_i28, EmptyString_c2)

val string_of_digitclo_i76 = fn n_v20118 ⇒ string_of_digit_i30(n_v20118)

fun string_of_nat_i31(n_v20119) =
  let s_v20120 = string_of_digit_i30(modn_i14(n_v20119, 10)) in
  let n_v20121 = divn_i13(n_v20119, 10) in
  if ltn_i6(0, n_v20121) then
    cats_i15(string_of_nat_i31(n_v20121), s_v20120)
  else
    s_v20120

val string_of_natclo_i77 = fn n_v20122 ⇒ string_of_nat_i31(n_v20122)

fun gcd_i32(a_v20123, b_v20124) =
  let __v20125 = b_v20124 in
  if __v20125 then
    let __v20126 = __v20125.-1 in
    gcd_i32(b_v20124, modn_i14(a_v20123, b_v20124))
  else
    a_v20123

val gcdclo_i78 = fn a_v20127 b_v20128 ⇒ gcd_i32(a_v20127, b_v20128)

fun lcm_i33(a_v20129, b_v20130) =
  divn_i13(muln_i12(a_v20129, b_v20130), gcd_i32(a_v20129, b_v20130))

val lcmclo_i79 = fn a_v20131 b_v20132 ⇒ lcm_i33(a_v20131, b_v20132)

fun powm_i34(a_v20133, b_v20134, m_v20135) =
  let __v20136 = b_v20134 in
  if __v20136 then
    let b_v20137 = __v20136.-1 in
    modn_i14(muln_i12(a_v20133, powm_i34(a_v20133, b_v20137, m_v20135)),
             m_v20135)
  else
    1

val powmclo_i80 =
  fn a_v20138 b_v20139 m_v20140 ⇒ powm_i34(a_v20138, b_v20139, m_v20140)

fun server_i39(ch_v20141) =
  let x_v20142 = 61 in
  let y_v20143 = 53 in
  let n_v20144 = muln_i12(x_v20142, y_v20143) in
  let tot_v20145 = lcm_i33(subn_i11(x_v20142, 1), subn_i11(y_v20143, 1)) in
  let e_v20146 = 17 in
  let d_v20147 = 413 in
  ln __v20148 ⇒
    let ch_v20149 = ((fn x_v20150 ⇒ ln __v20151 ⇒ ch_v20141) NULL) NULL
    in
    let ch_v20152 = ((fn x_v20153 ⇒ ln __v20154 ⇒ ch_v20149) NULL) NULL
    in
    let ch_v20155 =
      ((fn x_v20156 ⇒ ln __v20157 ⇒ send(ch_v20152, x_v20156)) n_v20144)
        NULL
    in
    let ch_v20158 = ((fn x_v20159 ⇒ ln __v20160 ⇒ ch_v20155) NULL) NULL
    in
    let ch_v20161 = ((fn x_v20162 ⇒ ln __v20163 ⇒ ch_v20158) NULL) NULL
    in
    let ch_v20164 = ((fn x_v20165 ⇒ ln __v20166 ⇒ ch_v20161) NULL) NULL
    in
    let ch_v20167 =
      ((fn x_v20168 ⇒ ln __v20169 ⇒ send(ch_v20164, x_v20168)) e_v20146)
        NULL
    in
    let ch_v20170 = ((fn x_v20171 ⇒ ln __v20172 ⇒ ch_v20167) NULL) NULL
    in
    let ch_v20173 = ((fn x_v20174 ⇒ ln __v20175 ⇒ ch_v20170) NULL) NULL
    in
    let ch_v20176 = ((fn x_v20177 ⇒ ln __v20178 ⇒ ch_v20173) NULL) NULL
    in
    let __v20179 = (ln __v20180 ⇒ (NULL, ch_v20176)) NULL in
    (match __v20179 with
     | (P0_v20181, ch_v20182) ⇒
       ln __v20183 ⇒
         let __v20184 = (ln __v20185 ⇒ recv(ch_v20182)) NULL in
         (match __v20184 with
          | (C_v20186, ch_v20187) ⇒
            ln __v20188 ⇒
              let __v20189 = (ln __v20190 ⇒ (NULL, ch_v20187)) NULL in
              (match __v20189 with
               | (pf_v20191, ch_v20192) ⇒
                 let P1_v20193 = powm_i34(C_v20186, d_v20147, n_v20144) in
                 ln __v20194 ⇒
                   let __v20195 =
                     (ln __v20196 ⇒ let __v20197 = ch_v20192 in NULL) NULL
                   in
                   (print_i26(cats_i15(string_of_nat_i31(P1_v20193), "\n")))
                     NULL
               end) NULL
          end) NULL
     end) NULL

val serverclo_i81 = fn ch_v20198 ⇒ server_i39(ch_v20198)

fun client_i40(ch_v20199) =
  let P0_v20200 = 123 in
  ln __v20201 ⇒
    let __v20202 = (ln __v20203 ⇒ (NULL, ch_v20199)) NULL in
    (match __v20202 with
     | (x_v20204, ch_v20205) ⇒
       ln __v20206 ⇒
         let __v20207 = (ln __v20208 ⇒ (NULL, ch_v20205)) NULL in
         (match __v20207 with
          | (y_v20209, ch_v20210) ⇒
            ln __v20211 ⇒
              let __v20212 = (ln __v20213 ⇒ recv(ch_v20210)) NULL in
              (match __v20212 with
               | (n_v20214, ch_v20215) ⇒
                 ln __v20216 ⇒
                   let __v20217 = (ln __v20218 ⇒ (NULL, ch_v20215)) NULL in
                   (match __v20217 with
                    | (pf1_v20219, ch_v20220) ⇒
                      ln __v20221 ⇒
                        let __v20222 =
                          (ln __v20223 ⇒ (NULL, ch_v20220)) NULL
                        in
                        (match __v20222 with
                         | (tot_v20224, ch_v20225) ⇒
                           ln __v20226 ⇒
                             let __v20227 =
                               (ln __v20228 ⇒ (NULL, ch_v20225)) NULL
                             in
                             (match __v20227 with
                              | (pf2_v20229, ch_v20230) ⇒
                                ln __v20231 ⇒
                                  let __v20232 =
                                    (ln __v20233 ⇒ recv(ch_v20230)) NULL
                                  in
                                  (match __v20232 with
                                   | (e_v20234, ch_v20235) ⇒
                                     ln __v20236 ⇒
                                       let __v20237 =
                                         (ln __v20238 ⇒ (NULL, ch_v20235))
                                           NULL
                                       in
                                       (match __v20237 with
                                        | (pf3_v20239, ch_v20240) ⇒
                                          ln __v20241 ⇒
                                            let __v20242 =
                                              (ln __v20243 ⇒
                                                 (NULL, ch_v20240))
                                                NULL
                                            in
                                            (match __v20242 with
                                             | (pf4_v20244, ch_v20245) ⇒
                                               ln __v20246 ⇒
                                                 let __v20247 =
                                                   (ln __v20248 ⇒
                                                      (NULL, ch_v20245))
                                                     NULL
                                                 in
                                                 (match __v20247 with
                                                  | (pf5_v20249, ch_v20250) ⇒
                                                    ln __v20251 ⇒
                                                      let ch_v20252 =
                                                        ((fn x_v20253 ⇒
                                                            ln __v20254 ⇒
                                                              ch_v20250)
                                                           NULL)
                                                          NULL
                                                      in
                                                      let ch_v20255 =
                                                        ((fn x_v20256 ⇒
                                                            ln __v20257 ⇒
                                                              send(ch_v20252, x_v20256))
                                                           powm_i34(P0_v20200,
                                                                    e_v20234,
                                                                    n_v20214))
                                                          NULL
                                                      in
                                                      let ch_v20258 =
                                                        ((fn x_v20259 ⇒
                                                            ln __v20260 ⇒
                                                              ch_v20255)
                                                           NULL)
                                                          NULL
                                                      in
                                                      (ln __v20261 ⇒
                                                         close(ch_v20258))
                                                        NULL
                                                  end) NULL
                                             end) NULL
                                        end) NULL
                                   end) NULL
                              end) NULL
                         end) NULL
                    end) NULL
               end) NULL
          end) NULL
     end) NULL

val clientclo_i82 = fn ch_v20262 ⇒ client_i40(ch_v20262)

main =
  (ln __v20263 ⇒
     let c_v20264 =
       (ln __v20265 ⇒ fork c_v20266 in (server_i39(c_v20266)) NULL) NULL
     in
     let c0_v20267 =
       (ln __v20268 ⇒
          fork c0_v20269 in
            (ln __v20270 ⇒
               let __v20271 = (ln __v20272 ⇒ recv(c0_v20269)) NULL in
               (match __v20271 with
                | (c_v20273, c0_v20274) ⇒
                  ln __v20275 ⇒
                    let __v20276 =
                      (ln __v20277 ⇒ let __v20278 = c0_v20274 in NULL) NULL
                    in (client_i40(c_v20273)) NULL
                end) NULL)
              NULL)
         NULL
     in
     let c0_v20279 =
       ((ln x_v20280 __v20281 ⇒ send(c0_v20267, x_v20280)) c_v20264) NULL
     in
     let __v20282 = (ln __v20283 ⇒ close(c0_v20279)) NULL in
     (ln __v20284 ⇒ sleep(1)) NULL)
    NULL

trans23 success--------------------------

fun andb_i1(b1_v21568, b2_v21569) = if b1_v21568 then
                                      b2_v21569
                                    else
                                      0

val andbclo_i50 = fn b1_v21570 b2_v21571 ⇒ andb_i1(b1_v21570, b2_v21571)

fun orb_i2(b1_v21572, b2_v21573) = if b1_v21572 then
                                     1
                                   else
                                     b2_v21573

val orbclo_i51 = fn b1_v21574 b2_v21575 ⇒ orb_i2(b1_v21574, b2_v21575)

fun notb_i3(b_v21576) = if b_v21576 then
                          0
                        else
                          1

val notbclo_i52 = fn b_v21577 ⇒ notb_i3(b_v21577)

fun lten_i4(x_v21578, y_v21579) =
  if x_v21578 then
    if y_v21579 then
      lten_i4(x_v21578.-1, y_v21579.-1)
    else
      0
  else
    1

val ltenclo_i53 = fn x_v21580 y_v21581 ⇒ lten_i4(x_v21580, y_v21581)

fun gten_i5(x_v21582, y_v21583) =
  if x_v21582 then
    if y_v21583 then
      gten_i5(x_v21582.-1, y_v21583.-1)
    else
      1
  else
    if y_v21583 then
      0
    else
      1

val gtenclo_i54 = fn x_v21584 y_v21585 ⇒ gten_i5(x_v21584, y_v21585)

fun ltn_i6(x_v21586, y_v21587) =
  if x_v21586 then
    if y_v21587 then
      ltn_i6(x_v21586.-1, y_v21587.-1)
    else
      0
  else
    if y_v21587 then
      1
    else
      0

val ltnclo_i55 = fn x_v21588 y_v21589 ⇒ ltn_i6(x_v21588, y_v21589)

fun gtn_i7(x_v21590, y_v21591) =
  if x_v21590 then
    if y_v21591 then
      gtn_i7(x_v21590.-1, y_v21591.-1)
    else
      1
  else
    0

val gtnclo_i56 = fn x_v21592 y_v21593 ⇒ gtn_i7(x_v21592, y_v21593)

fun eqn_i8(x_v21594, y_v21595) =
  if x_v21594 then
    if y_v21595 then
      eqn_i8(x_v21594.-1, y_v21595.-1)
    else
      0
  else
    if y_v21595 then
      0
    else
      1

val eqnclo_i57 = fn x_v21596 y_v21597 ⇒ eqn_i8(x_v21596, y_v21597)

fun pred_i9(x_v21598) = if x_v21598 then
                          x_v21598.-1
                        else
                          0

val predclo_i58 = fn x_v21599 ⇒ pred_i9(x_v21599)

fun addn_i10(x_v21600, y_v21601) =
  if x_v21600 then
    addn_i10(x_v21600.-1, y_v21601).+1
  else
    y_v21601

val addnclo_i59 = fn x_v21602 y_v21603 ⇒ addn_i10(x_v21602, y_v21603)

fun subn_i11(x_v21604, y_v21605) =
  if y_v21605 then
    subn_i11(pred_i9(x_v21604), y_v21605.-1)
  else
    x_v21604

val subnclo_i60 = fn x_v21606 y_v21607 ⇒ subn_i11(x_v21606, y_v21607)

fun muln_i12(x_v21608, y_v21609) =
  if x_v21608 then
    addn_i10(y_v21609, muln_i12(x_v21608.-1, y_v21609))
  else
    0

val mulnclo_i61 = fn x_v21610 y_v21611 ⇒ muln_i12(x_v21610, y_v21611)

fun divn_i13(x_v21612, y_v21613) =
  if ltn_i6(x_v21612, y_v21613) then
    0
  else
    divn_i13(subn_i11(x_v21612, y_v21613), y_v21613).+1

val divnclo_i62 = fn x_v21614 y_v21615 ⇒ divn_i13(x_v21614, y_v21615)

fun modn_i14(x_v21616, y_v21617) =
  subn_i11(x_v21616, muln_i12(divn_i13(x_v21616, y_v21617), y_v21617))

val modnclo_i63 = fn x_v21618 y_v21619 ⇒ modn_i14(x_v21618, y_v21619)

fun cats_i15(s1_v21620, s2_v21621) =
  match s1_v21620 with
  | EmptyString_c2  ⇒ s2_v21621
  | String_c3 c_v21622 s1_v21623 ⇒
    (String_c3 c_v21622 cats_i15(s1_v21623, s2_v21621))
  end

val catsclo_i64 = fn s1_v21624 s2_v21625 ⇒ cats_i15(s1_v21624, s2_v21625)

fun strlen_i16(s_v21626) =
  match s_v21626 with
  | EmptyString_c2  ⇒ 0
  | String_c3 __v21627 s_v21628 ⇒ strlen_i16(s_v21628).+1
  end

val strlenclo_i65 = fn s_v21629 ⇒ strlen_i16(s_v21629)

fun lenUU_i45(A_v21630, xs_v21631) =
  match xs_v21631 with
  | nilUU_c12  ⇒ (0, nilUU_c12)
  | consUU_c13 x_v21632 xs_v21633 ⇒
    match lenUU_i45(NULL, xs_v21633) with
    | (n_v21634, xs_v21635) ⇒
      (n_v21634.+1, (consUU_c13 x_v21632 xs_v21635))
    end
  end

val lenUUclo_i66 = fn A_v21636 xs_v21637 ⇒ lenUU_i45(A_v21636, xs_v21637)

fun lenUL_i44(A_v21638, xs_v21639) =
  match xs_v21639 with
  | nilUL_c10  ⇒ (0, nilUL_c10)
  | consUL_c11 x_v21640 xs_v21641 ⇒
    match lenUL_i44(NULL, xs_v21641) with
    | (n_v21642, xs_v21643) ⇒
      (n_v21642.+1, (consUL_c11 x_v21640 xs_v21643))
    end
  end

val lenULclo_i67 = fn A_v21644 xs_v21645 ⇒ lenUL_i44(A_v21644, xs_v21645)

fun lenLL_i42(A_v21646, xs_v21647) =
  match xs_v21647 with
  | nilLL_c6  ⇒ (0, nilLL_c6)
  | consLL_c7 x_v21648 xs_v21649 ⇒
    match lenLL_i42(NULL, xs_v21649) with
    | (n_v21650, xs_v21651) ⇒ (n_v21650.+1, (consLL_c7 x_v21648 xs_v21651))
    end
  end

val lenLLclo_i68 = fn A_v21652 xs_v21653 ⇒ lenLL_i42(A_v21652, xs_v21653)

fun appendUU_i49(A_v21654, xs_v21655, ys_v21656) =
  match xs_v21655 with
  | nilUU_c12  ⇒ ys_v21656
  | consUU_c13 x_v21657 xs_v21658 ⇒
    (consUU_c13 x_v21657 appendUU_i49(NULL, xs_v21658, ys_v21656))
  end

val appendUUclo_i69 =
  fn A_v21659 xs_v21660 ⇒
    ln ys_v21661 ⇒ appendUU_i49(A_v21659, xs_v21660, ys_v21661)

fun appendUL_i48(A_v21662, xs_v21663, ys_v21664) =
  match xs_v21663 with
  | nilUL_c10  ⇒ ys_v21664
  | consUL_c11 x_v21665 xs_v21666 ⇒
    (consUL_c11 x_v21665 appendUL_i48(NULL, xs_v21666, ys_v21664))
  end

val appendULclo_i70 =
  fn A_v21667 xs_v21668 ⇒
    ln ys_v21669 ⇒ appendUL_i48(A_v21667, xs_v21668, ys_v21669)

fun appendLL_i46(A_v21670, xs_v21671, ys_v21672) =
  match xs_v21671 with
  | nilLL_c6  ⇒ ys_v21672
  | consLL_c7 x_v21673 xs_v21674 ⇒
    (consLL_c7 x_v21673 appendLL_i46(NULL, xs_v21674, ys_v21672))
  end

val appendLLclo_i71 =
  fn A_v21675 xs_v21676 ⇒
    ln ys_v21677 ⇒ appendLL_i46(A_v21675, xs_v21676, ys_v21677)

fun readline_i25(__v21678) =
  ln __v21679 ⇒
    let ch_v21680 = open stdin in
    let ch_v21681 = send(ch_v21680, 1) in
    let __v21682 = recv(ch_v21681) in
    match __v21682 with
    | (s_v21683, ch_v21684) ⇒
      let ch_v21685 = send(ch_v21684, 0) in s_v21683
    end

val readlineclo_i72 = fn __v21686 ⇒ readline_i25(__v21686)

fun print_i26(s_v21687) =
  ln __v21688 ⇒
    let ch_v21689 = open stdout in
    let ch_v21690 = send(ch_v21689, 1) in
    let ch_v21691 = send(ch_v21690, s_v21687) in
    let ch_v21692 = send(ch_v21691, 0) in NULL

val printclo_i73 = fn s_v21693 ⇒ print_i26(s_v21693)

fun prerr_i27(s_v21694) =
  ln __v21695 ⇒
    let ch_v21696 = open stderr in
    let ch_v21697 = send(ch_v21696, 1) in
    let ch_v21698 = send(ch_v21697, s_v21694) in
    let ch_v21699 = send(ch_v21698, 0) in NULL

val prerrclo_i74 = fn s_v21700 ⇒ prerr_i27(s_v21700)

val digits_i28 =
  (consUU_c13
    "0"
    (consUU_c13
      "1"
      (consUU_c13
        "2"
        (consUU_c13
          "3"
          (consUU_c13
            "4"
            (consUU_c13
              "5"
              (consUU_c13
                "6"
                (consUU_c13 "7" (consUU_c13 "8" (consUU_c13 "9" nilUU_c12))))))))))

fun get_at_i29(A_v21701, n_v21702, xs_v21703, a_v21704) =
  if n_v21702 then
    match xs_v21703 with
    | nilUU_c12  ⇒ a_v21704
    | consUU_c13 __v21705 xs_v21706 ⇒
      get_at_i29(NULL, n_v21702.-1, xs_v21706, a_v21704)
    end
  else
    match xs_v21703 with
    | nilUU_c12  ⇒ a_v21704 | consUU_c13 x_v21707 __v21708 ⇒ x_v21707
    end

val get_atclo_i75 =
  fn A_v21709 n_v21710 xs_v21711 a_v21712 ⇒
    get_at_i29(A_v21709, n_v21710, xs_v21711, a_v21712)

fun string_of_digit_i30(n_v21713) =
  get_at_i29(NULL, n_v21713, digits_i28, EmptyString_c2)

val string_of_digitclo_i76 = fn n_v21714 ⇒ string_of_digit_i30(n_v21714)

fun string_of_nat_i31(n_v21715) =
  let s_v21716 = string_of_digit_i30(modn_i14(n_v21715, 10)) in
  let n_v21717 = divn_i13(n_v21715, 10) in
  if ltn_i6(0, n_v21717) then
    cats_i15(string_of_nat_i31(n_v21717), s_v21716)
  else
    s_v21716

val string_of_natclo_i77 = fn n_v21718 ⇒ string_of_nat_i31(n_v21718)

fun gcd_i32(a_v21719, b_v21720) =
  if b_v21720 then
    gcd_i32(b_v21720, modn_i14(a_v21719, b_v21720))
  else
    a_v21719

val gcdclo_i78 = fn a_v21721 b_v21722 ⇒ gcd_i32(a_v21721, b_v21722)

fun lcm_i33(a_v21723, b_v21724) =
  divn_i13(muln_i12(a_v21723, b_v21724), gcd_i32(a_v21723, b_v21724))

val lcmclo_i79 = fn a_v21725 b_v21726 ⇒ lcm_i33(a_v21725, b_v21726)

fun powm_i34(a_v21727, b_v21728, m_v21729) =
  if b_v21728 then
    modn_i14(muln_i12(a_v21727, powm_i34(a_v21727, b_v21728.-1, m_v21729)),
             m_v21729)
  else
    1

val powmclo_i80 =
  fn a_v21730 b_v21731 m_v21732 ⇒ powm_i34(a_v21730, b_v21731, m_v21732)

fun server_i39(ch_v21733) =
  let n_v21734 = muln_i12(61, 53) in
  let tot_v21735 = lcm_i33(subn_i11(61, 1), subn_i11(53, 1)) in
  ln __v21736 ⇒
    let ch_v21737 = send(ch_v21733, n_v21734) in
    let ch_v21738 = send(ch_v21737, 17) in
    match (NULL, ch_v21738) with
    | (P0_v21739, ch_v21740) ⇒
      let __v21741 = recv(ch_v21740) in
      match __v21741 with
      | (C_v21742, ch_v21743) ⇒
        match (NULL, ch_v21743) with
        | (pf_v21744, ch_v21745) ⇒
          let P1_v21746 = powm_i34(C_v21742, 413, n_v21734) in
          (print_i26(cats_i15(string_of_nat_i31(P1_v21746), "\n"))) NULL
        end
      end
    end

val serverclo_i81 = fn ch_v21747 ⇒ server_i39(ch_v21747)

fun client_i40(ch_v21748) =
  ln __v21749 ⇒
    match (NULL, ch_v21748) with
    | (x_v21750, ch_v21751) ⇒
      match (NULL, ch_v21751) with
      | (y_v21752, ch_v21753) ⇒
        let __v21754 = recv(ch_v21753) in
        match __v21754 with
        | (n_v21755, ch_v21756) ⇒
          match (NULL, ch_v21756) with
          | (pf1_v21757, ch_v21758) ⇒
            match (NULL, ch_v21758) with
            | (tot_v21759, ch_v21760) ⇒
              match (NULL, ch_v21760) with
              | (pf2_v21761, ch_v21762) ⇒
                let __v21763 = recv(ch_v21762) in
                match __v21763 with
                | (e_v21764, ch_v21765) ⇒
                  match (NULL, ch_v21765) with
                  | (pf3_v21766, ch_v21767) ⇒
                    match (NULL, ch_v21767) with
                    | (pf4_v21768, ch_v21769) ⇒
                      match (NULL, ch_v21769) with
                      | (pf5_v21770, ch_v21771) ⇒
                        let ch_v21772 =
                          let x_v21773 = powm_i34(123, e_v21764, n_v21755) in
                          send(ch_v21771, x_v21773)
                        in close(ch_v21772)
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

val clientclo_i82 = fn ch_v21774 ⇒ client_i40(ch_v21774)

main =
  let c_v21775 = fork c_v21776 in (server_i39(c_v21776)) NULL in
  let c0_v21777 =
    fork c0_v21778 in
      let __v21779 = recv(c0_v21778) in
      match __v21779 with
      | (c_v21780, c0_v21781) ⇒ (client_i40(c_v21780)) NULL
      end
  in
  let c0_v21782 = send(c0_v21777, c_v21775) in
  let __v21783 = close(c0_v21782) in sleep(1)

trans3e success--------------------------

trans34 success--------------------------

