* Inference
#+begin_src 
(m : A)
_
#+end_src

* Core
#+begin_src 
U L
x, y, z
#+end_src

#+begin_src 
∀ (x : A) → B 
∀ (x : A) ⊸ B 
A → B
A ⊸ B

∀ {x : A} → B 
∀ {x : A} ⊸ B 
{A} → B
{A} ⊸ B
#+end_src

#+begin_src 
fn (x : A) ⇒ m
ln (x : A) ⇒ m
fn x ⇒ m
ln x ⇒ m

fn {x : A} ⇒ m
ln {x : A} ⇒ m
fn {x} ⇒ m
ln {x} ⇒ m
#+end_src

#+begin_src 
fix f x ⇒ m
let x = m in n
let fix f x = m in n
#+end_src

* Data
#+begin_src 
∃ (x : A) × B 
∃ (x : A) ⊗ B
A × B
A ⊗ B

∃ {x : A} × B 
∃ {x : A} ⊗ B
{A} × B
{A} ⊗ B
#+end_src

#+begin_src 
(m, n)
⟨m, n⟩

({m}, n)
⟨{m}, n⟩
#+end_src

#+begin_src 
match m {x ⇒ A} with
| C x3 x4 ⇒ m
end
#+end_src

* Equality
#+begin_src
m ≡ n
refl m
rew {x, p ⇒ A} pf in m
#+end_src

* Monadic
#+begin_src 
IO A
return m
let x ⇐ m in n
#+end_src

* Session
#+begin_src 
proto 


!(x : A) → •
?(x : A) → B
!A → B
?A → B

!{x : A} → B
?{x : A} → B
!{A} → B
?{A} → B

ch‹A›
hc‹A›
#+end_src

#+begin_src
fork (x : A) in m

recv c
send c

{recv} c
{send} c

close c
#+end_src

* Effects
#+begin_src 
l ↦ A
(l @ m)
ptr_elim m as (l2, c)%A in (l1, x)%n
#+end_src

* Top Level
#+begin_src 
inductive nat : U = O | S of nat

inductive vec (A : U) (n : nat) : U =
| vec_nil
| vec_cons of {n0 : nat} {pf : n ≡ S n0} (hd : A) (tl : vec A n0)

definition pred (x : nat) : nat =
  match x with
  | O   ⇒ O
  | S n ⇒ n

theorem eq_sym (pf : a ≡ b) : b ≡ a =
  rew [x, _ ⇒ x ≡ a] pf in refl
#+end_src

* Notes
#+begin_src 
inductive array : loc -> nat -> Sort s -> L :=
| array_nil  : ∀ {l : loc} -> array l 0 A
| array_cons : ∀ {n : nat} -> (l + n ↦ A) -> array l n A -> array l (S n) A

Γ ⊢ l : loc    Γ ⊢ A : s
—————————————————————————
Γ ⊢ l ↦ A : L

ϵ ⊢ l : loc    ϵ; ϵ ⊢ m : A
————————————————————————————
ϵ; ϵ ⊢ (l @ m) : l ↦ A

Γ, l2 : loc, z : l2 ↦ A ⊢ C : s 
Γ ⊢ m : l ↦ A    Γ, l1 : loc, x : A ⊢ n : C[l1/l2,(l1 @ x)/z]
——————————————————————————————————————————————————————————————
Γ ⊢ ptr_elim (l1 @ x) = m as [l2, z] C in n : C[l/l2,m/z]

Γ; Δ ⊢ sz : nat
——————————————————————————————————————————————————
Γ; Δ ⊢ alloc sz : IO ({l : loc} ⊗ hunk l sz unit)

Γ; Δ1 ⊢ c : l ↦ unit    Γ; Δ2 ⊢ m : A
——————————————————————————————————————
Γ; Δ1 ⊍ Δ2 ⊢ set c m : IO (l ↦ A)

Γ; Δ ⊢ c : l ↦ A
——————————————————————————————————
Γ; Δ ⊢ get c : IO (A ⊗ (l ↦ unit))

Γ; Δ ⊢ c : l ↦ unit
————————————————————————
Γ; Δ ⊢ free c : IO unit


set : ∀ (l : loc) → (l ↦ unit) → A -> (l ↦ A)
get : ∀ (l : loc) → (l ↦ 
#+end_src

#+begin_src 
inductive Box (A : U) : L :=
| BoxIntro : A -> Box A

Tensor (`nat) (λ (bx : `nat) → match bx with | [x] → `(x ≡ 20))
TensorIntro (`nat) (λ bx → match bx with | [x] → `(x ≡ 20)) [20] [refl 20]

inductive Tensor (A : L) (B : A → L) : L :=
| TensorIntro : ∀ (x : A) → B x → Tensor A B
#+end_src
